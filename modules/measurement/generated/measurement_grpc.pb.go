// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: measurement.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserMeasurements_CreateWeight_FullMethodName               = "/fitSphere.measurement.UserMeasurements/CreateWeight"
	UserMeasurements_GetWeights_FullMethodName                 = "/fitSphere.measurement.UserMeasurements/GetWeights"
	UserMeasurements_GetWeight_FullMethodName                  = "/fitSphere.measurement.UserMeasurements/GetWeight"
	UserMeasurements_DeleteWeight_FullMethodName               = "/fitSphere.measurement.UserMeasurements/DeleteWeight"
	UserMeasurements_UpdateWeight_FullMethodName               = "/fitSphere.measurement.UserMeasurements/UpdateWeight"
	UserMeasurements_CreateWaterMeasurement_FullMethodName     = "/fitSphere.measurement.UserMeasurements/CreateWaterMeasurement"
	UserMeasurements_GetWaterMeasurements_FullMethodName       = "/fitSphere.measurement.UserMeasurements/GetWaterMeasurements"
	UserMeasurements_GetWaterMeasurement_FullMethodName        = "/fitSphere.measurement.UserMeasurements/GetWaterMeasurement"
	UserMeasurements_DeleteWaterMeasurement_FullMethodName     = "/fitSphere.measurement.UserMeasurements/DeleteWaterMeasurement"
	UserMeasurements_UpdateWaterMeasurement_FullMethodName     = "/fitSphere.measurement.UserMeasurements/UpdateWaterMeasurement"
	UserMeasurements_CreateWasteLineMeasurement_FullMethodName = "/fitSphere.measurement.UserMeasurements/CreateWasteLineMeasurement"
	UserMeasurements_GetWasteLineMeasurements_FullMethodName   = "/fitSphere.measurement.UserMeasurements/GetWasteLineMeasurements"
	UserMeasurements_GetWasteLineMeasurement_FullMethodName    = "/fitSphere.measurement.UserMeasurements/GetWasteLineMeasurement"
	UserMeasurements_DeleteWasteLineMeasurement_FullMethodName = "/fitSphere.measurement.UserMeasurements/DeleteWasteLineMeasurement"
	UserMeasurements_UpdateWasteLineMeasurement_FullMethodName = "/fitSphere.measurement.UserMeasurements/UpdateWasteLineMeasurement"
)

// UserMeasurementsClient is the client API for UserMeasurements service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMeasurementsClient interface {
	// weight
	CreateWeight(ctx context.Context, in *CreateWeightReq, opts ...grpc.CallOption) (*CreateWeightRes, error)
	GetWeights(ctx context.Context, in *GetWeightsReq, opts ...grpc.CallOption) (*GetWeightsRes, error)
	GetWeight(ctx context.Context, in *GetWeightReq, opts ...grpc.CallOption) (*GetWeightRes, error)
	DeleteWeight(ctx context.Context, in *DeleteWeightReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateWeight(ctx context.Context, in *UpdateWeightReq, opts ...grpc.CallOption) (*UpdateWeightRes, error)
	// waterIntake
	CreateWaterMeasurement(ctx context.Context, in *CreateWaterIntakeReq, opts ...grpc.CallOption) (*CreateWaterIntakeRes, error)
	GetWaterMeasurements(ctx context.Context, in *GetWaterIntakesReq, opts ...grpc.CallOption) (*GetWaterIntakesRes, error)
	GetWaterMeasurement(ctx context.Context, in *GetWaterIntakeReq, opts ...grpc.CallOption) (*GetWaterIntakeRes, error)
	DeleteWaterMeasurement(ctx context.Context, in *DeleteWaterIntakeReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateWaterMeasurement(ctx context.Context, in *UpdateWaterIntakeReq, opts ...grpc.CallOption) (*UpdateWaterIntakeRes, error)
	// wasteline
	CreateWasteLineMeasurement(ctx context.Context, in *CreateWasteLineReq, opts ...grpc.CallOption) (*CreateWasteLineRes, error)
	GetWasteLineMeasurements(ctx context.Context, in *GetWasteLinesReq, opts ...grpc.CallOption) (*GetWasteLinesRes, error)
	GetWasteLineMeasurement(ctx context.Context, in *GetWasteLineReq, opts ...grpc.CallOption) (*GetWasteLineRes, error)
	DeleteWasteLineMeasurement(ctx context.Context, in *DeleteWasteLineReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateWasteLineMeasurement(ctx context.Context, in *UpdateWasteLineReq, opts ...grpc.CallOption) (*UpdateWasteLineRes, error)
}

type userMeasurementsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMeasurementsClient(cc grpc.ClientConnInterface) UserMeasurementsClient {
	return &userMeasurementsClient{cc}
}

func (c *userMeasurementsClient) CreateWeight(ctx context.Context, in *CreateWeightReq, opts ...grpc.CallOption) (*CreateWeightRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWeightRes)
	err := c.cc.Invoke(ctx, UserMeasurements_CreateWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWeights(ctx context.Context, in *GetWeightsReq, opts ...grpc.CallOption) (*GetWeightsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeightsRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWeight(ctx context.Context, in *GetWeightReq, opts ...grpc.CallOption) (*GetWeightRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeightRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) DeleteWeight(ctx context.Context, in *DeleteWeightReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, UserMeasurements_DeleteWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) UpdateWeight(ctx context.Context, in *UpdateWeightReq, opts ...grpc.CallOption) (*UpdateWeightRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWeightRes)
	err := c.cc.Invoke(ctx, UserMeasurements_UpdateWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) CreateWaterMeasurement(ctx context.Context, in *CreateWaterIntakeReq, opts ...grpc.CallOption) (*CreateWaterIntakeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWaterIntakeRes)
	err := c.cc.Invoke(ctx, UserMeasurements_CreateWaterMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWaterMeasurements(ctx context.Context, in *GetWaterIntakesReq, opts ...grpc.CallOption) (*GetWaterIntakesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaterIntakesRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWaterMeasurements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWaterMeasurement(ctx context.Context, in *GetWaterIntakeReq, opts ...grpc.CallOption) (*GetWaterIntakeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaterIntakeRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWaterMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) DeleteWaterMeasurement(ctx context.Context, in *DeleteWaterIntakeReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, UserMeasurements_DeleteWaterMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) UpdateWaterMeasurement(ctx context.Context, in *UpdateWaterIntakeReq, opts ...grpc.CallOption) (*UpdateWaterIntakeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWaterIntakeRes)
	err := c.cc.Invoke(ctx, UserMeasurements_UpdateWaterMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) CreateWasteLineMeasurement(ctx context.Context, in *CreateWasteLineReq, opts ...grpc.CallOption) (*CreateWasteLineRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWasteLineRes)
	err := c.cc.Invoke(ctx, UserMeasurements_CreateWasteLineMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWasteLineMeasurements(ctx context.Context, in *GetWasteLinesReq, opts ...grpc.CallOption) (*GetWasteLinesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWasteLinesRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWasteLineMeasurements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) GetWasteLineMeasurement(ctx context.Context, in *GetWasteLineReq, opts ...grpc.CallOption) (*GetWasteLineRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWasteLineRes)
	err := c.cc.Invoke(ctx, UserMeasurements_GetWasteLineMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) DeleteWasteLineMeasurement(ctx context.Context, in *DeleteWasteLineReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, UserMeasurements_DeleteWasteLineMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMeasurementsClient) UpdateWasteLineMeasurement(ctx context.Context, in *UpdateWasteLineReq, opts ...grpc.CallOption) (*UpdateWasteLineRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWasteLineRes)
	err := c.cc.Invoke(ctx, UserMeasurements_UpdateWasteLineMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMeasurementsServer is the server API for UserMeasurements service.
// All implementations must embed UnimplementedUserMeasurementsServer
// for forward compatibility.
type UserMeasurementsServer interface {
	// weight
	CreateWeight(context.Context, *CreateWeightReq) (*CreateWeightRes, error)
	GetWeights(context.Context, *GetWeightsReq) (*GetWeightsRes, error)
	GetWeight(context.Context, *GetWeightReq) (*GetWeightRes, error)
	DeleteWeight(context.Context, *DeleteWeightReq) (*NilRes, error)
	UpdateWeight(context.Context, *UpdateWeightReq) (*UpdateWeightRes, error)
	// waterIntake
	CreateWaterMeasurement(context.Context, *CreateWaterIntakeReq) (*CreateWaterIntakeRes, error)
	GetWaterMeasurements(context.Context, *GetWaterIntakesReq) (*GetWaterIntakesRes, error)
	GetWaterMeasurement(context.Context, *GetWaterIntakeReq) (*GetWaterIntakeRes, error)
	DeleteWaterMeasurement(context.Context, *DeleteWaterIntakeReq) (*NilRes, error)
	UpdateWaterMeasurement(context.Context, *UpdateWaterIntakeReq) (*UpdateWaterIntakeRes, error)
	// wasteline
	CreateWasteLineMeasurement(context.Context, *CreateWasteLineReq) (*CreateWasteLineRes, error)
	GetWasteLineMeasurements(context.Context, *GetWasteLinesReq) (*GetWasteLinesRes, error)
	GetWasteLineMeasurement(context.Context, *GetWasteLineReq) (*GetWasteLineRes, error)
	DeleteWasteLineMeasurement(context.Context, *DeleteWasteLineReq) (*NilRes, error)
	UpdateWasteLineMeasurement(context.Context, *UpdateWasteLineReq) (*UpdateWasteLineRes, error)
	mustEmbedUnimplementedUserMeasurementsServer()
}

// UnimplementedUserMeasurementsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserMeasurementsServer struct{}

func (UnimplementedUserMeasurementsServer) CreateWeight(context.Context, *CreateWeightReq) (*CreateWeightRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWeight not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWeights(context.Context, *GetWeightsReq) (*GetWeightsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeights not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWeight(context.Context, *GetWeightReq) (*GetWeightRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeight not implemented")
}
func (UnimplementedUserMeasurementsServer) DeleteWeight(context.Context, *DeleteWeightReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWeight not implemented")
}
func (UnimplementedUserMeasurementsServer) UpdateWeight(context.Context, *UpdateWeightReq) (*UpdateWeightRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeight not implemented")
}
func (UnimplementedUserMeasurementsServer) CreateWaterMeasurement(context.Context, *CreateWaterIntakeReq) (*CreateWaterIntakeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWaterMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWaterMeasurements(context.Context, *GetWaterIntakesReq) (*GetWaterIntakesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaterMeasurements not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWaterMeasurement(context.Context, *GetWaterIntakeReq) (*GetWaterIntakeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaterMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) DeleteWaterMeasurement(context.Context, *DeleteWaterIntakeReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWaterMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) UpdateWaterMeasurement(context.Context, *UpdateWaterIntakeReq) (*UpdateWaterIntakeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWaterMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) CreateWasteLineMeasurement(context.Context, *CreateWasteLineReq) (*CreateWasteLineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWasteLineMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWasteLineMeasurements(context.Context, *GetWasteLinesReq) (*GetWasteLinesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasteLineMeasurements not implemented")
}
func (UnimplementedUserMeasurementsServer) GetWasteLineMeasurement(context.Context, *GetWasteLineReq) (*GetWasteLineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasteLineMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) DeleteWasteLineMeasurement(context.Context, *DeleteWasteLineReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWasteLineMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) UpdateWasteLineMeasurement(context.Context, *UpdateWasteLineReq) (*UpdateWasteLineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWasteLineMeasurement not implemented")
}
func (UnimplementedUserMeasurementsServer) mustEmbedUnimplementedUserMeasurementsServer() {}
func (UnimplementedUserMeasurementsServer) testEmbeddedByValue()                          {}

// UnsafeUserMeasurementsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMeasurementsServer will
// result in compilation errors.
type UnsafeUserMeasurementsServer interface {
	mustEmbedUnimplementedUserMeasurementsServer()
}

func RegisterUserMeasurementsServer(s grpc.ServiceRegistrar, srv UserMeasurementsServer) {
	// If the following call pancis, it indicates UnimplementedUserMeasurementsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserMeasurements_ServiceDesc, srv)
}

func _UserMeasurements_CreateWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).CreateWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_CreateWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).CreateWeight(ctx, req.(*CreateWeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWeights(ctx, req.(*GetWeightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWeight(ctx, req.(*GetWeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_DeleteWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).DeleteWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_DeleteWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).DeleteWeight(ctx, req.(*DeleteWeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_UpdateWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).UpdateWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_UpdateWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).UpdateWeight(ctx, req.(*UpdateWeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_CreateWaterMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWaterIntakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).CreateWaterMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_CreateWaterMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).CreateWaterMeasurement(ctx, req.(*CreateWaterIntakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWaterMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaterIntakesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWaterMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWaterMeasurements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWaterMeasurements(ctx, req.(*GetWaterIntakesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWaterMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaterIntakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWaterMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWaterMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWaterMeasurement(ctx, req.(*GetWaterIntakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_DeleteWaterMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWaterIntakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).DeleteWaterMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_DeleteWaterMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).DeleteWaterMeasurement(ctx, req.(*DeleteWaterIntakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_UpdateWaterMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWaterIntakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).UpdateWaterMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_UpdateWaterMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).UpdateWaterMeasurement(ctx, req.(*UpdateWaterIntakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_CreateWasteLineMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWasteLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).CreateWasteLineMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_CreateWasteLineMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).CreateWasteLineMeasurement(ctx, req.(*CreateWasteLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWasteLineMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasteLinesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWasteLineMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWasteLineMeasurements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWasteLineMeasurements(ctx, req.(*GetWasteLinesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_GetWasteLineMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasteLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).GetWasteLineMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_GetWasteLineMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).GetWasteLineMeasurement(ctx, req.(*GetWasteLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_DeleteWasteLineMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWasteLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).DeleteWasteLineMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_DeleteWasteLineMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).DeleteWasteLineMeasurement(ctx, req.(*DeleteWasteLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMeasurements_UpdateWasteLineMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWasteLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMeasurementsServer).UpdateWasteLineMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMeasurements_UpdateWasteLineMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMeasurementsServer).UpdateWasteLineMeasurement(ctx, req.(*UpdateWasteLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMeasurements_ServiceDesc is the grpc.ServiceDesc for UserMeasurements service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMeasurements_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.measurement.UserMeasurements",
	HandlerType: (*UserMeasurementsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWeight",
			Handler:    _UserMeasurements_CreateWeight_Handler,
		},
		{
			MethodName: "GetWeights",
			Handler:    _UserMeasurements_GetWeights_Handler,
		},
		{
			MethodName: "GetWeight",
			Handler:    _UserMeasurements_GetWeight_Handler,
		},
		{
			MethodName: "DeleteWeight",
			Handler:    _UserMeasurements_DeleteWeight_Handler,
		},
		{
			MethodName: "UpdateWeight",
			Handler:    _UserMeasurements_UpdateWeight_Handler,
		},
		{
			MethodName: "CreateWaterMeasurement",
			Handler:    _UserMeasurements_CreateWaterMeasurement_Handler,
		},
		{
			MethodName: "GetWaterMeasurements",
			Handler:    _UserMeasurements_GetWaterMeasurements_Handler,
		},
		{
			MethodName: "GetWaterMeasurement",
			Handler:    _UserMeasurements_GetWaterMeasurement_Handler,
		},
		{
			MethodName: "DeleteWaterMeasurement",
			Handler:    _UserMeasurements_DeleteWaterMeasurement_Handler,
		},
		{
			MethodName: "UpdateWaterMeasurement",
			Handler:    _UserMeasurements_UpdateWaterMeasurement_Handler,
		},
		{
			MethodName: "CreateWasteLineMeasurement",
			Handler:    _UserMeasurements_CreateWasteLineMeasurement_Handler,
		},
		{
			MethodName: "GetWasteLineMeasurements",
			Handler:    _UserMeasurements_GetWasteLineMeasurements_Handler,
		},
		{
			MethodName: "GetWasteLineMeasurement",
			Handler:    _UserMeasurements_GetWasteLineMeasurement_Handler,
		},
		{
			MethodName: "DeleteWasteLineMeasurement",
			Handler:    _UserMeasurements_DeleteWasteLineMeasurement_Handler,
		},
		{
			MethodName: "UpdateWasteLineMeasurement",
			Handler:    _UserMeasurements_UpdateWasteLineMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "measurement.proto",
}
