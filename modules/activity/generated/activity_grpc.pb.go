// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: activity.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Activity_GetActivity_FullMethodName                 = "/fitSphere.activity.Activity/GetActivity"
	Activity_GetActivitiesByID_FullMethodName           = "/fitSphere.activity.Activity/GetActivitiesByID"
	Activity_GetActivitiesByName_FullMethodName         = "/fitSphere.activity.Activity/GetActivitiesByName"
	Activity_GetUserExerciseSession_FullMethodName      = "/fitSphere.activity.Activity/GetUserExerciseSession"
	Activity_GetUserExerciseTotalData_FullMethodName    = "/fitSphere.activity.Activity/GetUserExerciseTotalData"
	Activity_GetUserExerciseSessionStats_FullMethodName = "/fitSphere.activity.Activity/GetUserExerciseSessionStats"
	Activity_GetExerciseSessionStats_FullMethodName     = "/fitSphere.activity.Activity/GetExerciseSessionStats"
	Activity_StartActivityTracker_FullMethodName        = "/fitSphere.activity.Activity/StartActivityTracker"
	Activity_PauseActivityTracker_FullMethodName        = "/fitSphere.activity.Activity/PauseActivityTracker"
	Activity_ResumeActivityTracker_FullMethodName       = "/fitSphere.activity.Activity/ResumeActivityTracker"
	Activity_StopActivityTracker_FullMethodName         = "/fitSphere.activity.Activity/StopActivityTracker"
	Activity_DeleteExerciseSession_FullMethodName       = "/fitSphere.activity.Activity/DeleteExerciseSession"
	Activity_DeleteAllExercisesSession_FullMethodName   = "/fitSphere.activity.Activity/DeleteAllExercisesSession"
)

// ActivityClient is the client API for Activity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityClient interface {
	GetActivity(ctx context.Context, in *GetActivityReq, opts ...grpc.CallOption) (*GetActivityRes, error)
	GetActivitiesByID(ctx context.Context, in *GetActivityIDReq, opts ...grpc.CallOption) (*GetActivityIDRes, error)
	GetActivitiesByName(ctx context.Context, in *GetActivityNameReq, opts ...grpc.CallOption) (*GetActivityNameRes, error)
	GetUserExerciseSession(ctx context.Context, in *GetUserExerciseSessionReq, opts ...grpc.CallOption) (*GetUserExerciseSessionRes, error)
	GetUserExerciseTotalData(ctx context.Context, in *GetUserExerciseTotalDataReq, opts ...grpc.CallOption) (*GetUserExerciseTotalDataRes, error)
	GetUserExerciseSessionStats(ctx context.Context, in *GetUserExerciseSessionStatsReq, opts ...grpc.CallOption) (*GetUserExerciseSessionStatsRes, error)
	GetExerciseSessionStats(ctx context.Context, in *GetExerciseSessionStatsOccurrenceReq, opts ...grpc.CallOption) (*GetExerciseSessionStatsOccurrenceRes, error)
	StartActivityTracker(ctx context.Context, in *StartActivityTrackerReq, opts ...grpc.CallOption) (*StartActivityTrackerRes, error)
	PauseActivityTracker(ctx context.Context, in *PauseActivityTrackerReq, opts ...grpc.CallOption) (*PauseActivityTrackerRes, error)
	ResumeActivityTracker(ctx context.Context, in *ResumeActivityTrackerReq, opts ...grpc.CallOption) (*ResumeActivityTrackerRes, error)
	StopActivityTracker(ctx context.Context, in *StopActivityTrackerReq, opts ...grpc.CallOption) (*StopActivityTrackerRes, error)
	DeleteExerciseSession(ctx context.Context, in *DeleteExerciseSessionReq, opts ...grpc.CallOption) (*NilRes, error)
	DeleteAllExercisesSession(ctx context.Context, in *DeleteAllExercisesSessionReq, opts ...grpc.CallOption) (*NilRes, error)
}

type activityClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityClient(cc grpc.ClientConnInterface) ActivityClient {
	return &activityClient{cc}
}

func (c *activityClient) GetActivity(ctx context.Context, in *GetActivityReq, opts ...grpc.CallOption) (*GetActivityRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityRes)
	err := c.cc.Invoke(ctx, Activity_GetActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetActivitiesByID(ctx context.Context, in *GetActivityIDReq, opts ...grpc.CallOption) (*GetActivityIDRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityIDRes)
	err := c.cc.Invoke(ctx, Activity_GetActivitiesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetActivitiesByName(ctx context.Context, in *GetActivityNameReq, opts ...grpc.CallOption) (*GetActivityNameRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityNameRes)
	err := c.cc.Invoke(ctx, Activity_GetActivitiesByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetUserExerciseSession(ctx context.Context, in *GetUserExerciseSessionReq, opts ...grpc.CallOption) (*GetUserExerciseSessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserExerciseSessionRes)
	err := c.cc.Invoke(ctx, Activity_GetUserExerciseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetUserExerciseTotalData(ctx context.Context, in *GetUserExerciseTotalDataReq, opts ...grpc.CallOption) (*GetUserExerciseTotalDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserExerciseTotalDataRes)
	err := c.cc.Invoke(ctx, Activity_GetUserExerciseTotalData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetUserExerciseSessionStats(ctx context.Context, in *GetUserExerciseSessionStatsReq, opts ...grpc.CallOption) (*GetUserExerciseSessionStatsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserExerciseSessionStatsRes)
	err := c.cc.Invoke(ctx, Activity_GetUserExerciseSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetExerciseSessionStats(ctx context.Context, in *GetExerciseSessionStatsOccurrenceReq, opts ...grpc.CallOption) (*GetExerciseSessionStatsOccurrenceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExerciseSessionStatsOccurrenceRes)
	err := c.cc.Invoke(ctx, Activity_GetExerciseSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) StartActivityTracker(ctx context.Context, in *StartActivityTrackerReq, opts ...grpc.CallOption) (*StartActivityTrackerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartActivityTrackerRes)
	err := c.cc.Invoke(ctx, Activity_StartActivityTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) PauseActivityTracker(ctx context.Context, in *PauseActivityTrackerReq, opts ...grpc.CallOption) (*PauseActivityTrackerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseActivityTrackerRes)
	err := c.cc.Invoke(ctx, Activity_PauseActivityTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ResumeActivityTracker(ctx context.Context, in *ResumeActivityTrackerReq, opts ...grpc.CallOption) (*ResumeActivityTrackerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeActivityTrackerRes)
	err := c.cc.Invoke(ctx, Activity_ResumeActivityTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) StopActivityTracker(ctx context.Context, in *StopActivityTrackerReq, opts ...grpc.CallOption) (*StopActivityTrackerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopActivityTrackerRes)
	err := c.cc.Invoke(ctx, Activity_StopActivityTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DeleteExerciseSession(ctx context.Context, in *DeleteExerciseSessionReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Activity_DeleteExerciseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DeleteAllExercisesSession(ctx context.Context, in *DeleteAllExercisesSessionReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Activity_DeleteAllExercisesSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServer is the server API for Activity service.
// All implementations must embed UnimplementedActivityServer
// for forward compatibility.
type ActivityServer interface {
	GetActivity(context.Context, *GetActivityReq) (*GetActivityRes, error)
	GetActivitiesByID(context.Context, *GetActivityIDReq) (*GetActivityIDRes, error)
	GetActivitiesByName(context.Context, *GetActivityNameReq) (*GetActivityNameRes, error)
	GetUserExerciseSession(context.Context, *GetUserExerciseSessionReq) (*GetUserExerciseSessionRes, error)
	GetUserExerciseTotalData(context.Context, *GetUserExerciseTotalDataReq) (*GetUserExerciseTotalDataRes, error)
	GetUserExerciseSessionStats(context.Context, *GetUserExerciseSessionStatsReq) (*GetUserExerciseSessionStatsRes, error)
	GetExerciseSessionStats(context.Context, *GetExerciseSessionStatsOccurrenceReq) (*GetExerciseSessionStatsOccurrenceRes, error)
	StartActivityTracker(context.Context, *StartActivityTrackerReq) (*StartActivityTrackerRes, error)
	PauseActivityTracker(context.Context, *PauseActivityTrackerReq) (*PauseActivityTrackerRes, error)
	ResumeActivityTracker(context.Context, *ResumeActivityTrackerReq) (*ResumeActivityTrackerRes, error)
	StopActivityTracker(context.Context, *StopActivityTrackerReq) (*StopActivityTrackerRes, error)
	DeleteExerciseSession(context.Context, *DeleteExerciseSessionReq) (*NilRes, error)
	DeleteAllExercisesSession(context.Context, *DeleteAllExercisesSessionReq) (*NilRes, error)
	mustEmbedUnimplementedActivityServer()
}

// UnimplementedActivityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityServer struct{}

func (UnimplementedActivityServer) GetActivity(context.Context, *GetActivityReq) (*GetActivityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (UnimplementedActivityServer) GetActivitiesByID(context.Context, *GetActivityIDReq) (*GetActivityIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivitiesByID not implemented")
}
func (UnimplementedActivityServer) GetActivitiesByName(context.Context, *GetActivityNameReq) (*GetActivityNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivitiesByName not implemented")
}
func (UnimplementedActivityServer) GetUserExerciseSession(context.Context, *GetUserExerciseSessionReq) (*GetUserExerciseSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExerciseSession not implemented")
}
func (UnimplementedActivityServer) GetUserExerciseTotalData(context.Context, *GetUserExerciseTotalDataReq) (*GetUserExerciseTotalDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExerciseTotalData not implemented")
}
func (UnimplementedActivityServer) GetUserExerciseSessionStats(context.Context, *GetUserExerciseSessionStatsReq) (*GetUserExerciseSessionStatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExerciseSessionStats not implemented")
}
func (UnimplementedActivityServer) GetExerciseSessionStats(context.Context, *GetExerciseSessionStatsOccurrenceReq) (*GetExerciseSessionStatsOccurrenceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseSessionStats not implemented")
}
func (UnimplementedActivityServer) StartActivityTracker(context.Context, *StartActivityTrackerReq) (*StartActivityTrackerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartActivityTracker not implemented")
}
func (UnimplementedActivityServer) PauseActivityTracker(context.Context, *PauseActivityTrackerReq) (*PauseActivityTrackerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseActivityTracker not implemented")
}
func (UnimplementedActivityServer) ResumeActivityTracker(context.Context, *ResumeActivityTrackerReq) (*ResumeActivityTrackerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeActivityTracker not implemented")
}
func (UnimplementedActivityServer) StopActivityTracker(context.Context, *StopActivityTrackerReq) (*StopActivityTrackerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopActivityTracker not implemented")
}
func (UnimplementedActivityServer) DeleteExerciseSession(context.Context, *DeleteExerciseSessionReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExerciseSession not implemented")
}
func (UnimplementedActivityServer) DeleteAllExercisesSession(context.Context, *DeleteAllExercisesSessionReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllExercisesSession not implemented")
}
func (UnimplementedActivityServer) mustEmbedUnimplementedActivityServer() {}
func (UnimplementedActivityServer) testEmbeddedByValue()                  {}

// UnsafeActivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServer will
// result in compilation errors.
type UnsafeActivityServer interface {
	mustEmbedUnimplementedActivityServer()
}

func RegisterActivityServer(s grpc.ServiceRegistrar, srv ActivityServer) {
	// If the following call pancis, it indicates UnimplementedActivityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Activity_ServiceDesc, srv)
}

func _Activity_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetActivity(ctx, req.(*GetActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetActivitiesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetActivitiesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetActivitiesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetActivitiesByID(ctx, req.(*GetActivityIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetActivitiesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetActivitiesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetActivitiesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetActivitiesByName(ctx, req.(*GetActivityNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetUserExerciseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExerciseSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetUserExerciseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetUserExerciseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetUserExerciseSession(ctx, req.(*GetUserExerciseSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetUserExerciseTotalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExerciseTotalDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetUserExerciseTotalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetUserExerciseTotalData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetUserExerciseTotalData(ctx, req.(*GetUserExerciseTotalDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetUserExerciseSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExerciseSessionStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetUserExerciseSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetUserExerciseSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetUserExerciseSessionStats(ctx, req.(*GetUserExerciseSessionStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetExerciseSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseSessionStatsOccurrenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetExerciseSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_GetExerciseSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetExerciseSessionStats(ctx, req.(*GetExerciseSessionStatsOccurrenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_StartActivityTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartActivityTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).StartActivityTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_StartActivityTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).StartActivityTracker(ctx, req.(*StartActivityTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_PauseActivityTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseActivityTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).PauseActivityTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_PauseActivityTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).PauseActivityTracker(ctx, req.(*PauseActivityTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ResumeActivityTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeActivityTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ResumeActivityTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_ResumeActivityTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ResumeActivityTracker(ctx, req.(*ResumeActivityTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_StopActivityTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopActivityTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).StopActivityTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_StopActivityTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).StopActivityTracker(ctx, req.(*StopActivityTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DeleteExerciseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DeleteExerciseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_DeleteExerciseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DeleteExerciseSession(ctx, req.(*DeleteExerciseSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DeleteAllExercisesSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllExercisesSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DeleteAllExercisesSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activity_DeleteAllExercisesSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DeleteAllExercisesSession(ctx, req.(*DeleteAllExercisesSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Activity_ServiceDesc is the grpc.ServiceDesc for Activity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.activity.Activity",
	HandlerType: (*ActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivity",
			Handler:    _Activity_GetActivity_Handler,
		},
		{
			MethodName: "GetActivitiesByID",
			Handler:    _Activity_GetActivitiesByID_Handler,
		},
		{
			MethodName: "GetActivitiesByName",
			Handler:    _Activity_GetActivitiesByName_Handler,
		},
		{
			MethodName: "GetUserExerciseSession",
			Handler:    _Activity_GetUserExerciseSession_Handler,
		},
		{
			MethodName: "GetUserExerciseTotalData",
			Handler:    _Activity_GetUserExerciseTotalData_Handler,
		},
		{
			MethodName: "GetUserExerciseSessionStats",
			Handler:    _Activity_GetUserExerciseSessionStats_Handler,
		},
		{
			MethodName: "GetExerciseSessionStats",
			Handler:    _Activity_GetExerciseSessionStats_Handler,
		},
		{
			MethodName: "StartActivityTracker",
			Handler:    _Activity_StartActivityTracker_Handler,
		},
		{
			MethodName: "PauseActivityTracker",
			Handler:    _Activity_PauseActivityTracker_Handler,
		},
		{
			MethodName: "ResumeActivityTracker",
			Handler:    _Activity_ResumeActivityTracker_Handler,
		},
		{
			MethodName: "StopActivityTracker",
			Handler:    _Activity_StopActivityTracker_Handler,
		},
		{
			MethodName: "DeleteExerciseSession",
			Handler:    _Activity_DeleteExerciseSession_Handler,
		},
		{
			MethodName: "DeleteAllExercisesSession",
			Handler:    _Activity_DeleteAllExercisesSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity.proto",
}
