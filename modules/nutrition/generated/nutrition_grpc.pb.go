// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: nutrition.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NutritionalAnalysis_AnalyzeMealPlan_FullMethodName  = "/fitSphere.nutrition.NutritionalAnalysis/AnalyzeMealPlan"
	NutritionalAnalysis_RecommendChanges_FullMethodName = "/fitSphere.nutrition.NutritionalAnalysis/RecommendChanges"
)

// NutritionalAnalysisClient is the client API for NutritionalAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Nutrition Service
type NutritionalAnalysisClient interface {
	AnalyzeMealPlan(ctx context.Context, in *AnalyzeMealPlanReq, opts ...grpc.CallOption) (*AnalyzeMealPlanRes, error)
	RecommendChanges(ctx context.Context, in *RecommendChangesReq, opts ...grpc.CallOption) (*RecommendChangesRes, error)
}

type nutritionalAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewNutritionalAnalysisClient(cc grpc.ClientConnInterface) NutritionalAnalysisClient {
	return &nutritionalAnalysisClient{cc}
}

func (c *nutritionalAnalysisClient) AnalyzeMealPlan(ctx context.Context, in *AnalyzeMealPlanReq, opts ...grpc.CallOption) (*AnalyzeMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeMealPlanRes)
	err := c.cc.Invoke(ctx, NutritionalAnalysis_AnalyzeMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nutritionalAnalysisClient) RecommendChanges(ctx context.Context, in *RecommendChangesReq, opts ...grpc.CallOption) (*RecommendChangesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendChangesRes)
	err := c.cc.Invoke(ctx, NutritionalAnalysis_RecommendChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NutritionalAnalysisServer is the server API for NutritionalAnalysis service.
// All implementations must embed UnimplementedNutritionalAnalysisServer
// for forward compatibility.
//
// Nutrition Service
type NutritionalAnalysisServer interface {
	AnalyzeMealPlan(context.Context, *AnalyzeMealPlanReq) (*AnalyzeMealPlanRes, error)
	RecommendChanges(context.Context, *RecommendChangesReq) (*RecommendChangesRes, error)
	mustEmbedUnimplementedNutritionalAnalysisServer()
}

// UnimplementedNutritionalAnalysisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNutritionalAnalysisServer struct{}

func (UnimplementedNutritionalAnalysisServer) AnalyzeMealPlan(context.Context, *AnalyzeMealPlanReq) (*AnalyzeMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeMealPlan not implemented")
}
func (UnimplementedNutritionalAnalysisServer) RecommendChanges(context.Context, *RecommendChangesReq) (*RecommendChangesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendChanges not implemented")
}
func (UnimplementedNutritionalAnalysisServer) mustEmbedUnimplementedNutritionalAnalysisServer() {}
func (UnimplementedNutritionalAnalysisServer) testEmbeddedByValue()                             {}

// UnsafeNutritionalAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NutritionalAnalysisServer will
// result in compilation errors.
type UnsafeNutritionalAnalysisServer interface {
	mustEmbedUnimplementedNutritionalAnalysisServer()
}

func RegisterNutritionalAnalysisServer(s grpc.ServiceRegistrar, srv NutritionalAnalysisServer) {
	// If the following call pancis, it indicates UnimplementedNutritionalAnalysisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NutritionalAnalysis_ServiceDesc, srv)
}

func _NutritionalAnalysis_AnalyzeMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NutritionalAnalysisServer).AnalyzeMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NutritionalAnalysis_AnalyzeMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NutritionalAnalysisServer).AnalyzeMealPlan(ctx, req.(*AnalyzeMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NutritionalAnalysis_RecommendChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendChangesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NutritionalAnalysisServer).RecommendChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NutritionalAnalysis_RecommendChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NutritionalAnalysisServer).RecommendChanges(ctx, req.(*RecommendChangesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NutritionalAnalysis_ServiceDesc is the grpc.ServiceDesc for NutritionalAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NutritionalAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.nutrition.NutritionalAnalysis",
	HandlerType: (*NutritionalAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeMealPlan",
			Handler:    _NutritionalAnalysis_AnalyzeMealPlan_Handler,
		},
		{
			MethodName: "RecommendChanges",
			Handler:    _NutritionalAnalysis_RecommendChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nutrition.proto",
}
