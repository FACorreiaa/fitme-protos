// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: workout.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetExercisesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetExercisesReq) Reset() {
	*x = GetExercisesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExercisesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExercisesReq) ProtoMessage() {}

func (x *GetExercisesReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExercisesReq.ProtoReflect.Descriptor instead.
func (*GetExercisesReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{0}
}

func (x *GetExercisesReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetExercisesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Exercise []*XExercises `protobuf:"bytes,3,rep,name=exercise,proto3" json:"exercise,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetExercisesRes) Reset() {
	*x = GetExercisesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExercisesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExercisesRes) ProtoMessage() {}

func (x *GetExercisesRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExercisesRes.ProtoReflect.Descriptor instead.
func (*GetExercisesRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{1}
}

func (x *GetExercisesRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExercisesRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExercisesRes) GetExercise() []*XExercises {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *GetExercisesRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetExerciseIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseId string       `protobuf:"bytes,1,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	Request    *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetExerciseIDReq) Reset() {
	*x = GetExerciseIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExerciseIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExerciseIDReq) ProtoMessage() {}

func (x *GetExerciseIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExerciseIDReq.ProtoReflect.Descriptor instead.
func (*GetExerciseIDReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{2}
}

func (x *GetExerciseIDReq) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *GetExerciseIDReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetExerciseIDRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Exercise *XExercises   `protobuf:"bytes,3,opt,name=exercise,proto3" json:"exercise,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetExerciseIDRes) Reset() {
	*x = GetExerciseIDRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExerciseIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExerciseIDRes) ProtoMessage() {}

func (x *GetExerciseIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExerciseIDRes.ProtoReflect.Descriptor instead.
func (*GetExerciseIDRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{3}
}

func (x *GetExerciseIDRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExerciseIDRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExerciseIDRes) GetExercise() *XExercises {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *GetExerciseIDRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type CreateExerciseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exercise *XExercises  `protobuf:"bytes,1,opt,name=exercise,proto3" json:"exercise,omitempty"`
	UserId   string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Request  *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *CreateExerciseReq) Reset() {
	*x = CreateExerciseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExerciseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExerciseReq) ProtoMessage() {}

func (x *CreateExerciseReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExerciseReq.ProtoReflect.Descriptor instead.
func (*CreateExerciseReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{4}
}

func (x *CreateExerciseReq) GetExercise() *XExercises {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *CreateExerciseReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateExerciseReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateExerciseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Exercise *XExercises   `protobuf:"bytes,3,opt,name=exercise,proto3" json:"exercise,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateExerciseRes) Reset() {
	*x = CreateExerciseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExerciseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExerciseRes) ProtoMessage() {}

func (x *CreateExerciseRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExerciseRes.ProtoReflect.Descriptor instead.
func (*CreateExerciseRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{5}
}

func (x *CreateExerciseRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateExerciseRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateExerciseRes) GetExercise() *XExercises {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *CreateExerciseRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpdateExerciseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseId string        `protobuf:"bytes,1,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	Updates    []*XDiff      `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Response   *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpdateExerciseReq) Reset() {
	*x = UpdateExerciseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExerciseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExerciseReq) ProtoMessage() {}

func (x *UpdateExerciseReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExerciseReq.ProtoReflect.Descriptor instead.
func (*UpdateExerciseReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateExerciseReq) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *UpdateExerciseReq) GetUpdates() []*XDiff {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateExerciseReq) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteExerciseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseId string       `protobuf:"bytes,1,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	Request    *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteExerciseReq) Reset() {
	*x = DeleteExerciseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExerciseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExerciseReq) ProtoMessage() {}

func (x *DeleteExerciseReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExerciseReq.ProtoReflect.Descriptor instead.
func (*DeleteExerciseReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteExerciseReq) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *DeleteExerciseReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetWorkoutPlanExercisesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetWorkoutPlanExercisesReq) Reset() {
	*x = GetWorkoutPlanExercisesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlanExercisesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlanExercisesReq) ProtoMessage() {}

func (x *GetWorkoutPlanExercisesReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlanExercisesReq.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlanExercisesReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{8}
}

func (x *GetWorkoutPlanExercisesReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetWorkoutPlanExercisesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkoutExerciseDay []*XWorkoutExerciseDay `protobuf:"bytes,3,rep,name=workout_exercise_day,json=workoutExerciseDay,proto3" json:"workout_exercise_day,omitempty"`
	Response           *BaseResponse          `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetWorkoutPlanExercisesRes) Reset() {
	*x = GetWorkoutPlanExercisesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlanExercisesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlanExercisesRes) ProtoMessage() {}

func (x *GetWorkoutPlanExercisesRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlanExercisesRes.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlanExercisesRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{9}
}

func (x *GetWorkoutPlanExercisesRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWorkoutPlanExercisesRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWorkoutPlanExercisesRes) GetWorkoutExerciseDay() []*XWorkoutExerciseDay {
	if x != nil {
		return x.WorkoutExerciseDay
	}
	return nil
}

func (x *GetWorkoutPlanExercisesRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetExerciseByIdWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseWorkoutPlan string       `protobuf:"bytes,1,opt,name=exercise_workout_plan,json=exerciseWorkoutPlan,proto3" json:"exercise_workout_plan,omitempty"`
	Request             *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetExerciseByIdWorkoutPlanReq) Reset() {
	*x = GetExerciseByIdWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExerciseByIdWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExerciseByIdWorkoutPlanReq) ProtoMessage() {}

func (x *GetExerciseByIdWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExerciseByIdWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*GetExerciseByIdWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{10}
}

func (x *GetExerciseByIdWorkoutPlanReq) GetExerciseWorkoutPlan() string {
	if x != nil {
		return x.ExerciseWorkoutPlan
	}
	return ""
}

func (x *GetExerciseByIdWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetExerciseByIdWorkoutPlanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkoutExerciseDay *XWorkoutExerciseDay `protobuf:"bytes,3,opt,name=workout_exercise_day,json=workoutExerciseDay,proto3" json:"workout_exercise_day,omitempty"`
	Response           *BaseResponse        `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetExerciseByIdWorkoutPlanRes) Reset() {
	*x = GetExerciseByIdWorkoutPlanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExerciseByIdWorkoutPlanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExerciseByIdWorkoutPlanRes) ProtoMessage() {}

func (x *GetExerciseByIdWorkoutPlanRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExerciseByIdWorkoutPlanRes.ProtoReflect.Descriptor instead.
func (*GetExerciseByIdWorkoutPlanRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{11}
}

func (x *GetExerciseByIdWorkoutPlanRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetExerciseByIdWorkoutPlanRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExerciseByIdWorkoutPlanRes) GetWorkoutExerciseDay() *XWorkoutExerciseDay {
	if x != nil {
		return x.WorkoutExerciseDay
	}
	return nil
}

func (x *GetExerciseByIdWorkoutPlanRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteExerciseByIdWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseId    []string     `protobuf:"bytes,1,rep,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	WorkoutPlanId string       `protobuf:"bytes,2,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	Day           string       `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`
	HardDelete    bool         `protobuf:"varint,4,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"`
	Request       *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteExerciseByIdWorkoutPlanReq) Reset() {
	*x = DeleteExerciseByIdWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExerciseByIdWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExerciseByIdWorkoutPlanReq) ProtoMessage() {}

func (x *DeleteExerciseByIdWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExerciseByIdWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*DeleteExerciseByIdWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteExerciseByIdWorkoutPlanReq) GetExerciseId() []string {
	if x != nil {
		return x.ExerciseId
	}
	return nil
}

func (x *DeleteExerciseByIdWorkoutPlanReq) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *DeleteExerciseByIdWorkoutPlanReq) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *DeleteExerciseByIdWorkoutPlanReq) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

func (x *DeleteExerciseByIdWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateExerciseByIdWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutPlanId string       `protobuf:"bytes,1,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	Updates       []*XDiff     `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Request       *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateExerciseByIdWorkoutPlanReq) Reset() {
	*x = UpdateExerciseByIdWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExerciseByIdWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExerciseByIdWorkoutPlanReq) ProtoMessage() {}

func (x *UpdateExerciseByIdWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExerciseByIdWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*UpdateExerciseByIdWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateExerciseByIdWorkoutPlanReq) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *UpdateExerciseByIdWorkoutPlanReq) GetUpdates() []*XDiff {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateExerciseByIdWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateExerciseByIdWorkoutPlanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkoutExerciseDay *XWorkoutExerciseDay `protobuf:"bytes,3,opt,name=workout_exercise_day,json=workoutExerciseDay,proto3" json:"workout_exercise_day,omitempty"`
	Response           *BaseResponse        `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpdateExerciseByIdWorkoutPlanRes) Reset() {
	*x = UpdateExerciseByIdWorkoutPlanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExerciseByIdWorkoutPlanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExerciseByIdWorkoutPlanRes) ProtoMessage() {}

func (x *UpdateExerciseByIdWorkoutPlanRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExerciseByIdWorkoutPlanRes.ProtoReflect.Descriptor instead.
func (*UpdateExerciseByIdWorkoutPlanRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateExerciseByIdWorkoutPlanRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateExerciseByIdWorkoutPlanRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateExerciseByIdWorkoutPlanRes) GetWorkoutExerciseDay() *XWorkoutExerciseDay {
	if x != nil {
		return x.WorkoutExerciseDay
	}
	return nil
}

func (x *UpdateExerciseByIdWorkoutPlanRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type InsertExerciseWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutDay    string       `protobuf:"bytes,1,opt,name=workout_day,json=workoutDay,proto3" json:"workout_day,omitempty"`
	WorkoutPlanId string       `protobuf:"bytes,2,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	ExerciseId    string       `protobuf:"bytes,3,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	Request       *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertExerciseWorkoutPlanReq) Reset() {
	*x = InsertExerciseWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertExerciseWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertExerciseWorkoutPlanReq) ProtoMessage() {}

func (x *InsertExerciseWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertExerciseWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*InsertExerciseWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{15}
}

func (x *InsertExerciseWorkoutPlanReq) GetWorkoutDay() string {
	if x != nil {
		return x.WorkoutDay
	}
	return ""
}

func (x *InsertExerciseWorkoutPlanReq) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *InsertExerciseWorkoutPlanReq) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *InsertExerciseWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetWorkoutPlansReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetWorkoutPlansReq) Reset() {
	*x = GetWorkoutPlansReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlansReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlansReq) ProtoMessage() {}

func (x *GetWorkoutPlansReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlansReq.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlansReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{16}
}

func (x *GetWorkoutPlansReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetWorkoutPlansRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message     string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkoutPlan []*XWorkoutPlanResponse `protobuf:"bytes,3,rep,name=workout_plan,json=workoutPlan,proto3" json:"workout_plan,omitempty"`
	Response    *BaseResponse           `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetWorkoutPlansRes) Reset() {
	*x = GetWorkoutPlansRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlansRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlansRes) ProtoMessage() {}

func (x *GetWorkoutPlansRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlansRes.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlansRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{17}
}

func (x *GetWorkoutPlansRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWorkoutPlansRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWorkoutPlansRes) GetWorkoutPlan() []*XWorkoutPlanResponse {
	if x != nil {
		return x.WorkoutPlan
	}
	return nil
}

func (x *GetWorkoutPlansRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutPlanId string       `protobuf:"bytes,1,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	Request       *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetWorkoutPlanReq) Reset() {
	*x = GetWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlanReq) ProtoMessage() {}

func (x *GetWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{18}
}

func (x *GetWorkoutPlanReq) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *GetWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetWorkoutPlanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message     string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WorkoutPlan *XWorkoutPlanResponse `protobuf:"bytes,3,opt,name=workout_plan,json=workoutPlan,proto3" json:"workout_plan,omitempty"`
	Response    *BaseResponse         `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetWorkoutPlanRes) Reset() {
	*x = GetWorkoutPlanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutPlanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutPlanRes) ProtoMessage() {}

func (x *GetWorkoutPlanRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutPlanRes.ProtoReflect.Descriptor instead.
func (*GetWorkoutPlanRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{19}
}

func (x *GetWorkoutPlanRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWorkoutPlanRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWorkoutPlanRes) GetWorkoutPlan() *XWorkoutPlanResponse {
	if x != nil {
		return x.WorkoutPlan
	}
	return nil
}

func (x *GetWorkoutPlanRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type InsertWorkoutPlanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Workout  *XWorkoutPlan `protobuf:"bytes,3,opt,name=workout,proto3" json:"workout,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *InsertWorkoutPlanRes) Reset() {
	*x = InsertWorkoutPlanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertWorkoutPlanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertWorkoutPlanRes) ProtoMessage() {}

func (x *InsertWorkoutPlanRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertWorkoutPlanRes.ProtoReflect.Descriptor instead.
func (*InsertWorkoutPlanRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{20}
}

func (x *InsertWorkoutPlanRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InsertWorkoutPlanRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InsertWorkoutPlanRes) GetWorkout() *XWorkoutPlan {
	if x != nil {
		return x.Workout
	}
	return nil
}

func (x *InsertWorkoutPlanRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpdateExerciseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Exercise *XExercises   `protobuf:"bytes,3,opt,name=exercise,proto3" json:"exercise,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpdateExerciseRes) Reset() {
	*x = UpdateExerciseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExerciseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExerciseRes) ProtoMessage() {}

func (x *UpdateExerciseRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExerciseRes.ProtoReflect.Descriptor instead.
func (*UpdateExerciseRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateExerciseRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateExerciseRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateExerciseRes) GetExercise() *XExercises {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *UpdateExerciseRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpdateWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId string       `protobuf:"bytes,1,opt,name=workout_id,json=workoutId,proto3" json:"workout_id,omitempty"`
	Updates   []*XDiff     `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Request   *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateWorkoutPlanReq) Reset() {
	*x = UpdateWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkoutPlanReq) ProtoMessage() {}

func (x *UpdateWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*UpdateWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateWorkoutPlanReq) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *UpdateWorkoutPlanReq) GetUpdates() []*XDiff {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateWorkoutPlanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Workout  *XWorkoutPlan `protobuf:"bytes,3,opt,name=workout,proto3" json:"workout,omitempty"`
	Response *BaseResponse `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpdateWorkoutPlanRes) Reset() {
	*x = UpdateWorkoutPlanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkoutPlanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkoutPlanRes) ProtoMessage() {}

func (x *UpdateWorkoutPlanRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkoutPlanRes.ProtoReflect.Descriptor instead.
func (*UpdateWorkoutPlanRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateWorkoutPlanRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateWorkoutPlanRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateWorkoutPlanRes) GetWorkout() *XWorkoutPlan {
	if x != nil {
		return x.Workout
	}
	return nil
}

func (x *UpdateWorkoutPlanRes) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WorkoutPlanId string       `protobuf:"bytes,2,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	HardDelete    bool         `protobuf:"varint,3,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"` // soft delete by default or change later
	Request       *BaseRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteWorkoutPlanReq) Reset() {
	*x = DeleteWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkoutPlanReq) ProtoMessage() {}

func (x *DeleteWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*DeleteWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteWorkoutPlanReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteWorkoutPlanReq) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *DeleteWorkoutPlanReq) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

func (x *DeleteWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type NilRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NilRes) Reset() {
	*x = NilRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NilRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NilRes) ProtoMessage() {}

func (x *NilRes) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NilRes.ProtoReflect.Descriptor instead.
func (*NilRes) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{25}
}

type XDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	OldValue string `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue string `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *XDiff) Reset() {
	*x = XDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XDiff) ProtoMessage() {}

func (x *XDiff) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XDiff.ProtoReflect.Descriptor instead.
func (*XDiff) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{26}
}

func (x *XDiff) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *XDiff) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *XDiff) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

type XWorkoutPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId      string                 `protobuf:"bytes,1,opt,name=workout_id,json=workoutId,proto3" json:"workout_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Notes          string                 `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Rating         uint32                 `protobuf:"varint,7,opt,name=rating,proto3" json:"rating,omitempty"`
	WorkoutPlanDay []*XWorkoutPlanDay     `protobuf:"bytes,8,rep,name=workout_plan_day,json=workoutPlanDay,proto3" json:"workout_plan_day,omitempty"`
}

func (x *XWorkoutPlan) Reset() {
	*x = XWorkoutPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutPlan) ProtoMessage() {}

func (x *XWorkoutPlan) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutPlan.ProtoReflect.Descriptor instead.
func (*XWorkoutPlan) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{27}
}

func (x *XWorkoutPlan) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *XWorkoutPlan) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *XWorkoutPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *XWorkoutPlan) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *XWorkoutPlan) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *XWorkoutPlan) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *XWorkoutPlan) GetRating() uint32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *XWorkoutPlan) GetWorkoutPlanDay() []*XWorkoutPlanDay {
	if x != nil {
		return x.WorkoutPlanDay
	}
	return nil
}

type XWorkoutPlanDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day       string        `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Exercises []*XExercises `protobuf:"bytes,2,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *XWorkoutPlanDay) Reset() {
	*x = XWorkoutPlanDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutPlanDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutPlanDay) ProtoMessage() {}

func (x *XWorkoutPlanDay) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutPlanDay.ProtoReflect.Descriptor instead.
func (*XWorkoutPlanDay) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{28}
}

func (x *XWorkoutPlanDay) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *XWorkoutPlanDay) GetExercises() []*XExercises {
	if x != nil {
		return x.Exercises
	}
	return nil
}

type XExercises struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseId    string                 `protobuf:"bytes,1,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExerciseType  string                 `protobuf:"bytes,3,opt,name=exercise_type,json=exerciseType,proto3" json:"exercise_type,omitempty"`
	MuscleGroup   string                 `protobuf:"bytes,4,opt,name=muscle_group,json=muscleGroup,proto3" json:"muscle_group,omitempty"`
	Equipment     string                 `protobuf:"bytes,5,opt,name=equipment,proto3" json:"equipment,omitempty"`
	Difficulty    string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Instruction   string                 `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Video         string                 `protobuf:"bytes,8,opt,name=video,proto3" json:"video,omitempty"`
	CustomCreated bool                   `protobuf:"varint,9,opt,name=custom_created,json=customCreated,proto3" json:"custom_created,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *XExercises) Reset() {
	*x = XExercises{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XExercises) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XExercises) ProtoMessage() {}

func (x *XExercises) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XExercises.ProtoReflect.Descriptor instead.
func (*XExercises) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{29}
}

func (x *XExercises) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *XExercises) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *XExercises) GetExerciseType() string {
	if x != nil {
		return x.ExerciseType
	}
	return ""
}

func (x *XExercises) GetMuscleGroup() string {
	if x != nil {
		return x.MuscleGroup
	}
	return ""
}

func (x *XExercises) GetEquipment() string {
	if x != nil {
		return x.Equipment
	}
	return ""
}

func (x *XExercises) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *XExercises) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *XExercises) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *XExercises) GetCustomCreated() bool {
	if x != nil {
		return x.CustomCreated
	}
	return false
}

func (x *XExercises) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *XExercises) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type XWorkoutExerciseDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutExerciseDay string                 `protobuf:"bytes,1,opt,name=workout_exercise_day,json=workoutExerciseDay,proto3" json:"workout_exercise_day,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExerciseType       string                 `protobuf:"bytes,3,opt,name=exercise_type,json=exerciseType,proto3" json:"exercise_type,omitempty"`
	MuscleGroup        string                 `protobuf:"bytes,4,opt,name=muscle_group,json=muscleGroup,proto3" json:"muscle_group,omitempty"`
	Equipment          string                 `protobuf:"bytes,5,opt,name=equipment,proto3" json:"equipment,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Instruction        string                 `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Video              string                 `protobuf:"bytes,8,opt,name=video,proto3" json:"video,omitempty"`
	CustomCreated      bool                   `protobuf:"varint,9,opt,name=custom_created,json=customCreated,proto3" json:"custom_created,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Day                string                 `protobuf:"bytes,12,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *XWorkoutExerciseDay) Reset() {
	*x = XWorkoutExerciseDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutExerciseDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutExerciseDay) ProtoMessage() {}

func (x *XWorkoutExerciseDay) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutExerciseDay.ProtoReflect.Descriptor instead.
func (*XWorkoutExerciseDay) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{30}
}

func (x *XWorkoutExerciseDay) GetWorkoutExerciseDay() string {
	if x != nil {
		return x.WorkoutExerciseDay
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetExerciseType() string {
	if x != nil {
		return x.ExerciseType
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetMuscleGroup() string {
	if x != nil {
		return x.MuscleGroup
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetEquipment() string {
	if x != nil {
		return x.Equipment
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *XWorkoutExerciseDay) GetCustomCreated() bool {
	if x != nil {
		return x.CustomCreated
	}
	return false
}

func (x *XWorkoutExerciseDay) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *XWorkoutExerciseDay) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *XWorkoutExerciseDay) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

type XWorkoutPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutPlanId string                 `protobuf:"bytes,1,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WorkoutDay    []*WorkoutDayResponse  `protobuf:"bytes,4,rep,name=workout_day,json=workoutDay,proto3" json:"workout_day,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Rating        uint32                 `protobuf:"varint,8,opt,name=rating,proto3" json:"rating,omitempty"`
	Day           string                 `protobuf:"bytes,9,opt,name=day,proto3" json:"day,omitempty"`
	Exercises     []string               `protobuf:"bytes,10,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *XWorkoutPlanResponse) Reset() {
	*x = XWorkoutPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutPlanResponse) ProtoMessage() {}

func (x *XWorkoutPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutPlanResponse.ProtoReflect.Descriptor instead.
func (*XWorkoutPlanResponse) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{31}
}

func (x *XWorkoutPlanResponse) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *XWorkoutPlanResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *XWorkoutPlanResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *XWorkoutPlanResponse) GetWorkoutDay() []*WorkoutDayResponse {
	if x != nil {
		return x.WorkoutDay
	}
	return nil
}

func (x *XWorkoutPlanResponse) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *XWorkoutPlanResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *XWorkoutPlanResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *XWorkoutPlanResponse) GetRating() uint32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *XWorkoutPlanResponse) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *XWorkoutPlanResponse) GetExercises() []string {
	if x != nil {
		return x.Exercises
	}
	return nil
}

type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Downstream string `protobuf:"bytes,998,opt,name=downstream,proto3" json:"downstream,omitempty"`
	RequestId  string `protobuf:"bytes,999,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{32}
}

func (x *BaseRequest) GetDownstream() string {
	if x != nil {
		return x.Downstream
	}
	return ""
}

func (x *BaseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type InsertWorkoutPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workout *XWorkoutPlan `protobuf:"bytes,1,opt,name=workout,proto3" json:"workout,omitempty"`
	PlanDay []*XPlanDay   `protobuf:"bytes,2,rep,name=plan_day,json=planDay,proto3" json:"plan_day,omitempty"`
	Request *BaseRequest  `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertWorkoutPlanReq) Reset() {
	*x = InsertWorkoutPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertWorkoutPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertWorkoutPlanReq) ProtoMessage() {}

func (x *InsertWorkoutPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertWorkoutPlanReq.ProtoReflect.Descriptor instead.
func (*InsertWorkoutPlanReq) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{33}
}

func (x *InsertWorkoutPlanReq) GetWorkout() *XWorkoutPlan {
	if x != nil {
		return x.Workout
	}
	return nil
}

func (x *InsertWorkoutPlanReq) GetPlanDay() []*XPlanDay {
	if x != nil {
		return x.PlanDay
	}
	return nil
}

func (x *InsertWorkoutPlanReq) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upstream  string `protobuf:"bytes,998,opt,name=upstream,proto3" json:"upstream,omitempty"`
	RequestId string `protobuf:"bytes,999,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status    string `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{34}
}

func (x *BaseResponse) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

func (x *BaseResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *BaseResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WorkoutDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day       string   `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Exercises []string `protobuf:"bytes,2,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *WorkoutDayResponse) Reset() {
	*x = WorkoutDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkoutDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkoutDayResponse) ProtoMessage() {}

func (x *WorkoutDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkoutDayResponse.ProtoReflect.Descriptor instead.
func (*WorkoutDayResponse) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{35}
}

func (x *WorkoutDayResponse) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *WorkoutDayResponse) GetExercises() []string {
	if x != nil {
		return x.Exercises
	}
	return nil
}

type XPlanDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day        string   `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	ExerciseId []string `protobuf:"bytes,2,rep,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
}

func (x *XPlanDay) Reset() {
	*x = XPlanDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XPlanDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XPlanDay) ProtoMessage() {}

func (x *XPlanDay) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XPlanDay.ProtoReflect.Descriptor instead.
func (*XPlanDay) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{36}
}

func (x *XPlanDay) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *XPlanDay) GetExerciseId() []string {
	if x != nil {
		return x.ExerciseId
	}
	return nil
}

type XWorkoutDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutDayId  string                 `protobuf:"bytes,1,opt,name=workout_day_id,json=workoutDayId,proto3" json:"workout_day_id,omitempty"`
	WorkoutPlanId string                 `protobuf:"bytes,2,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	Day           string                 `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Exercises     []*XExercises          `protobuf:"bytes,6,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *XWorkoutDay) Reset() {
	*x = XWorkoutDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutDay) ProtoMessage() {}

func (x *XWorkoutDay) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutDay.ProtoReflect.Descriptor instead.
func (*XWorkoutDay) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{37}
}

func (x *XWorkoutDay) GetWorkoutDayId() string {
	if x != nil {
		return x.WorkoutDayId
	}
	return ""
}

func (x *XWorkoutDay) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *XWorkoutDay) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *XWorkoutDay) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *XWorkoutDay) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *XWorkoutDay) GetExercises() []*XExercises {
	if x != nil {
		return x.Exercises
	}
	return nil
}

type XWorkoutPlanDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutPlanDetailId string                 `protobuf:"bytes,1,opt,name=workout_plan_detail_id,json=workoutPlanDetailId,proto3" json:"workout_plan_detail_id,omitempty"`
	WorkoutPlanId       string                 `protobuf:"bytes,2,opt,name=workout_plan_id,json=workoutPlanId,proto3" json:"workout_plan_id,omitempty"`
	Day                 string                 `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`
	Exercises           []string               `protobuf:"bytes,4,rep,name=exercises,proto3" json:"exercises,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *XWorkoutPlanDetail) Reset() {
	*x = XWorkoutPlanDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workout_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XWorkoutPlanDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XWorkoutPlanDetail) ProtoMessage() {}

func (x *XWorkoutPlanDetail) ProtoReflect() protoreflect.Message {
	mi := &file_workout_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XWorkoutPlanDetail.ProtoReflect.Descriptor instead.
func (*XWorkoutPlanDetail) Descriptor() ([]byte, []int) {
	return file_workout_proto_rawDescGZIP(), []int{38}
}

func (x *XWorkoutPlanDetail) GetWorkoutPlanDetailId() string {
	if x != nil {
		return x.WorkoutPlanDetailId
	}
	return ""
}

func (x *XWorkoutPlanDetail) GetWorkoutPlanId() string {
	if x != nil {
		return x.WorkoutPlanId
	}
	return ""
}

func (x *XWorkoutPlanDetail) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *XWorkoutPlanDetail) GetExercises() []string {
	if x != nil {
		return x.Exercises
	}
	return nil
}

func (x *XWorkoutPlanDetail) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_workout_proto protoreflect.FileDescriptor

var file_workout_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xbe, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x58, 0x44, 0x69, 0x66, 0x66, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x79, 0x52,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xea, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x79, 0x52, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x79,
	0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x44, 0x69, 0x66, 0x66,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x14,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58,
	0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44,
	0x61, 0x79, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x44, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x3b,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x44, 0x69, 0x66, 0x66,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x08, 0x0a,
	0x06, 0x4e, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x05, 0x58, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x0c, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x4c, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x74, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x22, 0x60, 0x0a,
	0x0f, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x73, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x22,
	0x9c, 0x03, 0x0a, 0x0a, 0x58, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc8,
	0x03, 0x0a, 0x13, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x58, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x73, 0x22, 0x4e, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0xe6,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0xe7, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x58, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x61, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x38, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0xe6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a,
	0x12, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x58, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x49, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x58, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x58, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x16,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x32, 0x93, 0x0c, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x66, 0x69, 0x74, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x66, 0x69,
	0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x66, 0x69, 0x74, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x4e, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x2e,
	0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x66,
	0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x30, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x66,
	0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x6f,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x33, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x4e, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x33, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2f, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x74, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x4e, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x4e, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x66, 0x69, 0x74,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70,
	0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x66, 0x69, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_workout_proto_rawDescOnce sync.Once
	file_workout_proto_rawDescData = file_workout_proto_rawDesc
)

func file_workout_proto_rawDescGZIP() []byte {
	file_workout_proto_rawDescOnce.Do(func() {
		file_workout_proto_rawDescData = protoimpl.X.CompressGZIP(file_workout_proto_rawDescData)
	})
	return file_workout_proto_rawDescData
}

var file_workout_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_workout_proto_goTypes = []any{
	(*GetExercisesReq)(nil),                  // 0: fitSphere.workout.GetExercisesReq
	(*GetExercisesRes)(nil),                  // 1: fitSphere.workout.GetExercisesRes
	(*GetExerciseIDReq)(nil),                 // 2: fitSphere.workout.GetExerciseIDReq
	(*GetExerciseIDRes)(nil),                 // 3: fitSphere.workout.GetExerciseIDRes
	(*CreateExerciseReq)(nil),                // 4: fitSphere.workout.CreateExerciseReq
	(*CreateExerciseRes)(nil),                // 5: fitSphere.workout.CreateExerciseRes
	(*UpdateExerciseReq)(nil),                // 6: fitSphere.workout.UpdateExerciseReq
	(*DeleteExerciseReq)(nil),                // 7: fitSphere.workout.DeleteExerciseReq
	(*GetWorkoutPlanExercisesReq)(nil),       // 8: fitSphere.workout.GetWorkoutPlanExercisesReq
	(*GetWorkoutPlanExercisesRes)(nil),       // 9: fitSphere.workout.GetWorkoutPlanExercisesRes
	(*GetExerciseByIdWorkoutPlanReq)(nil),    // 10: fitSphere.workout.GetExerciseByIdWorkoutPlanReq
	(*GetExerciseByIdWorkoutPlanRes)(nil),    // 11: fitSphere.workout.GetExerciseByIdWorkoutPlanRes
	(*DeleteExerciseByIdWorkoutPlanReq)(nil), // 12: fitSphere.workout.DeleteExerciseByIdWorkoutPlanReq
	(*UpdateExerciseByIdWorkoutPlanReq)(nil), // 13: fitSphere.workout.UpdateExerciseByIdWorkoutPlanReq
	(*UpdateExerciseByIdWorkoutPlanRes)(nil), // 14: fitSphere.workout.UpdateExerciseByIdWorkoutPlanRes
	(*InsertExerciseWorkoutPlanReq)(nil),     // 15: fitSphere.workout.InsertExerciseWorkoutPlanReq
	(*GetWorkoutPlansReq)(nil),               // 16: fitSphere.workout.GetWorkoutPlansReq
	(*GetWorkoutPlansRes)(nil),               // 17: fitSphere.workout.GetWorkoutPlansRes
	(*GetWorkoutPlanReq)(nil),                // 18: fitSphere.workout.GetWorkoutPlanReq
	(*GetWorkoutPlanRes)(nil),                // 19: fitSphere.workout.GetWorkoutPlanRes
	(*InsertWorkoutPlanRes)(nil),             // 20: fitSphere.workout.InsertWorkoutPlanRes
	(*UpdateExerciseRes)(nil),                // 21: fitSphere.workout.UpdateExerciseRes
	(*UpdateWorkoutPlanReq)(nil),             // 22: fitSphere.workout.UpdateWorkoutPlanReq
	(*UpdateWorkoutPlanRes)(nil),             // 23: fitSphere.workout.UpdateWorkoutPlanRes
	(*DeleteWorkoutPlanReq)(nil),             // 24: fitSphere.workout.DeleteWorkoutPlanReq
	(*NilRes)(nil),                           // 25: fitSphere.workout.NilRes
	(*XDiff)(nil),                            // 26: fitSphere.workout.XDiff
	(*XWorkoutPlan)(nil),                     // 27: fitSphere.workout.XWorkoutPlan
	(*XWorkoutPlanDay)(nil),                  // 28: fitSphere.workout.XWorkoutPlanDay
	(*XExercises)(nil),                       // 29: fitSphere.workout.XExercises
	(*XWorkoutExerciseDay)(nil),              // 30: fitSphere.workout.XWorkoutExerciseDay
	(*XWorkoutPlanResponse)(nil),             // 31: fitSphere.workout.XWorkoutPlanResponse
	(*BaseRequest)(nil),                      // 32: fitSphere.workout.BaseRequest
	(*InsertWorkoutPlanReq)(nil),             // 33: fitSphere.workout.InsertWorkoutPlanReq
	(*BaseResponse)(nil),                     // 34: fitSphere.workout.BaseResponse
	(*WorkoutDayResponse)(nil),               // 35: fitSphere.workout.WorkoutDayResponse
	(*XPlanDay)(nil),                         // 36: fitSphere.workout.XPlanDay
	(*XWorkoutDay)(nil),                      // 37: fitSphere.workout.XWorkoutDay
	(*XWorkoutPlanDetail)(nil),               // 38: fitSphere.workout.XWorkoutPlanDetail
	(*timestamppb.Timestamp)(nil),            // 39: google.protobuf.Timestamp
}
var file_workout_proto_depIdxs = []int32{
	32, // 0: fitSphere.workout.GetExercisesReq.request:type_name -> fitSphere.workout.BaseRequest
	29, // 1: fitSphere.workout.GetExercisesRes.exercise:type_name -> fitSphere.workout.XExercises
	34, // 2: fitSphere.workout.GetExercisesRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 3: fitSphere.workout.GetExerciseIDReq.request:type_name -> fitSphere.workout.BaseRequest
	29, // 4: fitSphere.workout.GetExerciseIDRes.exercise:type_name -> fitSphere.workout.XExercises
	34, // 5: fitSphere.workout.GetExerciseIDRes.response:type_name -> fitSphere.workout.BaseResponse
	29, // 6: fitSphere.workout.CreateExerciseReq.exercise:type_name -> fitSphere.workout.XExercises
	32, // 7: fitSphere.workout.CreateExerciseReq.request:type_name -> fitSphere.workout.BaseRequest
	29, // 8: fitSphere.workout.CreateExerciseRes.exercise:type_name -> fitSphere.workout.XExercises
	34, // 9: fitSphere.workout.CreateExerciseRes.response:type_name -> fitSphere.workout.BaseResponse
	26, // 10: fitSphere.workout.UpdateExerciseReq.updates:type_name -> fitSphere.workout.XDiff
	34, // 11: fitSphere.workout.UpdateExerciseReq.response:type_name -> fitSphere.workout.BaseResponse
	32, // 12: fitSphere.workout.DeleteExerciseReq.request:type_name -> fitSphere.workout.BaseRequest
	32, // 13: fitSphere.workout.GetWorkoutPlanExercisesReq.request:type_name -> fitSphere.workout.BaseRequest
	30, // 14: fitSphere.workout.GetWorkoutPlanExercisesRes.workout_exercise_day:type_name -> fitSphere.workout.XWorkoutExerciseDay
	34, // 15: fitSphere.workout.GetWorkoutPlanExercisesRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 16: fitSphere.workout.GetExerciseByIdWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	30, // 17: fitSphere.workout.GetExerciseByIdWorkoutPlanRes.workout_exercise_day:type_name -> fitSphere.workout.XWorkoutExerciseDay
	34, // 18: fitSphere.workout.GetExerciseByIdWorkoutPlanRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 19: fitSphere.workout.DeleteExerciseByIdWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	26, // 20: fitSphere.workout.UpdateExerciseByIdWorkoutPlanReq.updates:type_name -> fitSphere.workout.XDiff
	32, // 21: fitSphere.workout.UpdateExerciseByIdWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	30, // 22: fitSphere.workout.UpdateExerciseByIdWorkoutPlanRes.workout_exercise_day:type_name -> fitSphere.workout.XWorkoutExerciseDay
	34, // 23: fitSphere.workout.UpdateExerciseByIdWorkoutPlanRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 24: fitSphere.workout.InsertExerciseWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	32, // 25: fitSphere.workout.GetWorkoutPlansReq.request:type_name -> fitSphere.workout.BaseRequest
	31, // 26: fitSphere.workout.GetWorkoutPlansRes.workout_plan:type_name -> fitSphere.workout.XWorkoutPlanResponse
	34, // 27: fitSphere.workout.GetWorkoutPlansRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 28: fitSphere.workout.GetWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	31, // 29: fitSphere.workout.GetWorkoutPlanRes.workout_plan:type_name -> fitSphere.workout.XWorkoutPlanResponse
	34, // 30: fitSphere.workout.GetWorkoutPlanRes.response:type_name -> fitSphere.workout.BaseResponse
	27, // 31: fitSphere.workout.InsertWorkoutPlanRes.workout:type_name -> fitSphere.workout.XWorkoutPlan
	34, // 32: fitSphere.workout.InsertWorkoutPlanRes.response:type_name -> fitSphere.workout.BaseResponse
	29, // 33: fitSphere.workout.UpdateExerciseRes.exercise:type_name -> fitSphere.workout.XExercises
	34, // 34: fitSphere.workout.UpdateExerciseRes.response:type_name -> fitSphere.workout.BaseResponse
	26, // 35: fitSphere.workout.UpdateWorkoutPlanReq.updates:type_name -> fitSphere.workout.XDiff
	32, // 36: fitSphere.workout.UpdateWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	27, // 37: fitSphere.workout.UpdateWorkoutPlanRes.workout:type_name -> fitSphere.workout.XWorkoutPlan
	34, // 38: fitSphere.workout.UpdateWorkoutPlanRes.response:type_name -> fitSphere.workout.BaseResponse
	32, // 39: fitSphere.workout.DeleteWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	39, // 40: fitSphere.workout.XWorkoutPlan.created_at:type_name -> google.protobuf.Timestamp
	39, // 41: fitSphere.workout.XWorkoutPlan.updated_at:type_name -> google.protobuf.Timestamp
	28, // 42: fitSphere.workout.XWorkoutPlan.workout_plan_day:type_name -> fitSphere.workout.XWorkoutPlanDay
	29, // 43: fitSphere.workout.XWorkoutPlanDay.exercises:type_name -> fitSphere.workout.XExercises
	39, // 44: fitSphere.workout.XExercises.created_at:type_name -> google.protobuf.Timestamp
	39, // 45: fitSphere.workout.XExercises.updated_at:type_name -> google.protobuf.Timestamp
	39, // 46: fitSphere.workout.XWorkoutExerciseDay.created_at:type_name -> google.protobuf.Timestamp
	39, // 47: fitSphere.workout.XWorkoutExerciseDay.updated_at:type_name -> google.protobuf.Timestamp
	35, // 48: fitSphere.workout.XWorkoutPlanResponse.workout_day:type_name -> fitSphere.workout.WorkoutDayResponse
	39, // 49: fitSphere.workout.XWorkoutPlanResponse.created_at:type_name -> google.protobuf.Timestamp
	39, // 50: fitSphere.workout.XWorkoutPlanResponse.updated_at:type_name -> google.protobuf.Timestamp
	27, // 51: fitSphere.workout.InsertWorkoutPlanReq.workout:type_name -> fitSphere.workout.XWorkoutPlan
	36, // 52: fitSphere.workout.InsertWorkoutPlanReq.plan_day:type_name -> fitSphere.workout.XPlanDay
	32, // 53: fitSphere.workout.InsertWorkoutPlanReq.request:type_name -> fitSphere.workout.BaseRequest
	39, // 54: fitSphere.workout.XWorkoutDay.created_at:type_name -> google.protobuf.Timestamp
	39, // 55: fitSphere.workout.XWorkoutDay.updated_at:type_name -> google.protobuf.Timestamp
	29, // 56: fitSphere.workout.XWorkoutDay.exercises:type_name -> fitSphere.workout.XExercises
	39, // 57: fitSphere.workout.XWorkoutPlanDetail.created_at:type_name -> google.protobuf.Timestamp
	0,  // 58: fitSphere.workout.Workout.GetExercises:input_type -> fitSphere.workout.GetExercisesReq
	2,  // 59: fitSphere.workout.Workout.GetExerciseID:input_type -> fitSphere.workout.GetExerciseIDReq
	4,  // 60: fitSphere.workout.Workout.CreateExercise:input_type -> fitSphere.workout.CreateExerciseReq
	6,  // 61: fitSphere.workout.Workout.UpdateExercise:input_type -> fitSphere.workout.UpdateExerciseReq
	7,  // 62: fitSphere.workout.Workout.DeleteExercise:input_type -> fitSphere.workout.DeleteExerciseReq
	8,  // 63: fitSphere.workout.Workout.GetWorkoutPlanExercises:input_type -> fitSphere.workout.GetWorkoutPlanExercisesReq
	10, // 64: fitSphere.workout.Workout.GetExerciseByIdWorkoutPlan:input_type -> fitSphere.workout.GetExerciseByIdWorkoutPlanReq
	12, // 65: fitSphere.workout.Workout.DeleteExerciseByIdWorkoutPlan:input_type -> fitSphere.workout.DeleteExerciseByIdWorkoutPlanReq
	13, // 66: fitSphere.workout.Workout.UpdateExerciseByIdWorkoutPlan:input_type -> fitSphere.workout.UpdateExerciseByIdWorkoutPlanReq
	15, // 67: fitSphere.workout.Workout.InsertExerciseWorkoutPlan:input_type -> fitSphere.workout.InsertExerciseWorkoutPlanReq
	16, // 68: fitSphere.workout.Workout.GetWorkoutPlans:input_type -> fitSphere.workout.GetWorkoutPlansReq
	18, // 69: fitSphere.workout.Workout.GetWorkoutPlan:input_type -> fitSphere.workout.GetWorkoutPlanReq
	24, // 70: fitSphere.workout.Workout.DeleteWorkoutPlan:input_type -> fitSphere.workout.DeleteWorkoutPlanReq
	22, // 71: fitSphere.workout.Workout.UpdateWorkoutPlan:input_type -> fitSphere.workout.UpdateWorkoutPlanReq
	33, // 72: fitSphere.workout.Workout.InsertWorkoutPlan:input_type -> fitSphere.workout.InsertWorkoutPlanReq
	1,  // 73: fitSphere.workout.Workout.GetExercises:output_type -> fitSphere.workout.GetExercisesRes
	3,  // 74: fitSphere.workout.Workout.GetExerciseID:output_type -> fitSphere.workout.GetExerciseIDRes
	5,  // 75: fitSphere.workout.Workout.CreateExercise:output_type -> fitSphere.workout.CreateExerciseRes
	21, // 76: fitSphere.workout.Workout.UpdateExercise:output_type -> fitSphere.workout.UpdateExerciseRes
	25, // 77: fitSphere.workout.Workout.DeleteExercise:output_type -> fitSphere.workout.NilRes
	9,  // 78: fitSphere.workout.Workout.GetWorkoutPlanExercises:output_type -> fitSphere.workout.GetWorkoutPlanExercisesRes
	11, // 79: fitSphere.workout.Workout.GetExerciseByIdWorkoutPlan:output_type -> fitSphere.workout.GetExerciseByIdWorkoutPlanRes
	25, // 80: fitSphere.workout.Workout.DeleteExerciseByIdWorkoutPlan:output_type -> fitSphere.workout.NilRes
	14, // 81: fitSphere.workout.Workout.UpdateExerciseByIdWorkoutPlan:output_type -> fitSphere.workout.UpdateExerciseByIdWorkoutPlanRes
	25, // 82: fitSphere.workout.Workout.InsertExerciseWorkoutPlan:output_type -> fitSphere.workout.NilRes
	17, // 83: fitSphere.workout.Workout.GetWorkoutPlans:output_type -> fitSphere.workout.GetWorkoutPlansRes
	19, // 84: fitSphere.workout.Workout.GetWorkoutPlan:output_type -> fitSphere.workout.GetWorkoutPlanRes
	25, // 85: fitSphere.workout.Workout.DeleteWorkoutPlan:output_type -> fitSphere.workout.NilRes
	23, // 86: fitSphere.workout.Workout.UpdateWorkoutPlan:output_type -> fitSphere.workout.UpdateWorkoutPlanRes
	20, // 87: fitSphere.workout.Workout.InsertWorkoutPlan:output_type -> fitSphere.workout.InsertWorkoutPlanRes
	73, // [73:88] is the sub-list for method output_type
	58, // [58:73] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_workout_proto_init() }
func file_workout_proto_init() {
	if File_workout_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workout_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetExercisesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetExercisesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetExerciseIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetExerciseIDRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateExerciseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateExerciseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateExerciseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteExerciseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlanExercisesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlanExercisesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetExerciseByIdWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetExerciseByIdWorkoutPlanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteExerciseByIdWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateExerciseByIdWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateExerciseByIdWorkoutPlanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*InsertExerciseWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlansReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlansRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkoutPlanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*InsertWorkoutPlanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateExerciseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateWorkoutPlanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*NilRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*XDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutPlanDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*XExercises); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutExerciseDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*InsertWorkoutPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*WorkoutDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*XPlanDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workout_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*XWorkoutPlanDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workout_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workout_proto_goTypes,
		DependencyIndexes: file_workout_proto_depIdxs,
		MessageInfos:      file_workout_proto_msgTypes,
	}.Build()
	File_workout_proto = out.File
	file_workout_proto_rawDesc = nil
	file_workout_proto_goTypes = nil
	file_workout_proto_depIdxs = nil
}
