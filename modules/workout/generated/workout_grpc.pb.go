// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: workout.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Workout_GetExercises_FullMethodName                  = "/fitSphere.workout.Workout/GetExercises"
	Workout_GetExerciseID_FullMethodName                 = "/fitSphere.workout.Workout/GetExerciseID"
	Workout_CreateExercise_FullMethodName                = "/fitSphere.workout.Workout/CreateExercise"
	Workout_UpdateExercise_FullMethodName                = "/fitSphere.workout.Workout/UpdateExercise"
	Workout_DeleteExercise_FullMethodName                = "/fitSphere.workout.Workout/DeleteExercise"
	Workout_GetWorkoutPlanExercises_FullMethodName       = "/fitSphere.workout.Workout/GetWorkoutPlanExercises"
	Workout_GetExerciseByIdWorkoutPlan_FullMethodName    = "/fitSphere.workout.Workout/GetExerciseByIdWorkoutPlan"
	Workout_DeleteExerciseByIdWorkoutPlan_FullMethodName = "/fitSphere.workout.Workout/DeleteExerciseByIdWorkoutPlan"
	Workout_UpdateExerciseByIdWorkoutPlan_FullMethodName = "/fitSphere.workout.Workout/UpdateExerciseByIdWorkoutPlan"
	Workout_InsertExerciseWorkoutPlan_FullMethodName     = "/fitSphere.workout.Workout/InsertExerciseWorkoutPlan"
	Workout_GetWorkoutPlans_FullMethodName               = "/fitSphere.workout.Workout/GetWorkoutPlans"
	Workout_GetWorkoutPlan_FullMethodName                = "/fitSphere.workout.Workout/GetWorkoutPlan"
	Workout_DeleteWorkoutPlan_FullMethodName             = "/fitSphere.workout.Workout/DeleteWorkoutPlan"
	Workout_UpdateWorkoutPlan_FullMethodName             = "/fitSphere.workout.Workout/UpdateWorkoutPlan"
	Workout_InsertWorkoutPlan_FullMethodName             = "/fitSphere.workout.Workout/InsertWorkoutPlan"
)

// WorkoutClient is the client API for Workout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkoutClient interface {
	// exercises
	GetExercises(ctx context.Context, in *GetExercisesReq, opts ...grpc.CallOption) (*GetExercisesRes, error)
	GetExerciseID(ctx context.Context, in *GetExerciseIDReq, opts ...grpc.CallOption) (*GetExerciseIDRes, error)
	CreateExercise(ctx context.Context, in *CreateExerciseReq, opts ...grpc.CallOption) (*CreateExerciseRes, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseReq, opts ...grpc.CallOption) (*UpdateExerciseRes, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseReq, opts ...grpc.CallOption) (*NilRes, error)
	// workout exercises
	GetWorkoutPlanExercises(ctx context.Context, in *GetWorkoutPlanExercisesReq, opts ...grpc.CallOption) (*GetWorkoutPlanExercisesRes, error)
	GetExerciseByIdWorkoutPlan(ctx context.Context, in *GetExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*GetExerciseByIdWorkoutPlanRes, error)
	DeleteExerciseByIdWorkoutPlan(ctx context.Context, in *DeleteExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateExerciseByIdWorkoutPlan(ctx context.Context, in *UpdateExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*UpdateExerciseByIdWorkoutPlanRes, error)
	InsertExerciseWorkoutPlan(ctx context.Context, in *InsertExerciseWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error)
	// workouts
	GetWorkoutPlans(ctx context.Context, in *GetWorkoutPlansReq, opts ...grpc.CallOption) (*GetWorkoutPlansRes, error)
	GetWorkoutPlan(ctx context.Context, in *GetWorkoutPlanReq, opts ...grpc.CallOption) (*GetWorkoutPlanRes, error)
	DeleteWorkoutPlan(ctx context.Context, in *DeleteWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateWorkoutPlan(ctx context.Context, in *UpdateWorkoutPlanReq, opts ...grpc.CallOption) (*UpdateWorkoutPlanRes, error)
	InsertWorkoutPlan(ctx context.Context, in *InsertWorkoutPlanReq, opts ...grpc.CallOption) (*InsertWorkoutPlanRes, error)
}

type workoutClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkoutClient(cc grpc.ClientConnInterface) WorkoutClient {
	return &workoutClient{cc}
}

func (c *workoutClient) GetExercises(ctx context.Context, in *GetExercisesReq, opts ...grpc.CallOption) (*GetExercisesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExercisesRes)
	err := c.cc.Invoke(ctx, Workout_GetExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) GetExerciseID(ctx context.Context, in *GetExerciseIDReq, opts ...grpc.CallOption) (*GetExerciseIDRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExerciseIDRes)
	err := c.cc.Invoke(ctx, Workout_GetExerciseID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) CreateExercise(ctx context.Context, in *CreateExerciseReq, opts ...grpc.CallOption) (*CreateExerciseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExerciseRes)
	err := c.cc.Invoke(ctx, Workout_CreateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) UpdateExercise(ctx context.Context, in *UpdateExerciseReq, opts ...grpc.CallOption) (*UpdateExerciseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExerciseRes)
	err := c.cc.Invoke(ctx, Workout_UpdateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) DeleteExercise(ctx context.Context, in *DeleteExerciseReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Workout_DeleteExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) GetWorkoutPlanExercises(ctx context.Context, in *GetWorkoutPlanExercisesReq, opts ...grpc.CallOption) (*GetWorkoutPlanExercisesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkoutPlanExercisesRes)
	err := c.cc.Invoke(ctx, Workout_GetWorkoutPlanExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) GetExerciseByIdWorkoutPlan(ctx context.Context, in *GetExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*GetExerciseByIdWorkoutPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExerciseByIdWorkoutPlanRes)
	err := c.cc.Invoke(ctx, Workout_GetExerciseByIdWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) DeleteExerciseByIdWorkoutPlan(ctx context.Context, in *DeleteExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Workout_DeleteExerciseByIdWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) UpdateExerciseByIdWorkoutPlan(ctx context.Context, in *UpdateExerciseByIdWorkoutPlanReq, opts ...grpc.CallOption) (*UpdateExerciseByIdWorkoutPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExerciseByIdWorkoutPlanRes)
	err := c.cc.Invoke(ctx, Workout_UpdateExerciseByIdWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) InsertExerciseWorkoutPlan(ctx context.Context, in *InsertExerciseWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Workout_InsertExerciseWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) GetWorkoutPlans(ctx context.Context, in *GetWorkoutPlansReq, opts ...grpc.CallOption) (*GetWorkoutPlansRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkoutPlansRes)
	err := c.cc.Invoke(ctx, Workout_GetWorkoutPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) GetWorkoutPlan(ctx context.Context, in *GetWorkoutPlanReq, opts ...grpc.CallOption) (*GetWorkoutPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkoutPlanRes)
	err := c.cc.Invoke(ctx, Workout_GetWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) DeleteWorkoutPlan(ctx context.Context, in *DeleteWorkoutPlanReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Workout_DeleteWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) UpdateWorkoutPlan(ctx context.Context, in *UpdateWorkoutPlanReq, opts ...grpc.CallOption) (*UpdateWorkoutPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkoutPlanRes)
	err := c.cc.Invoke(ctx, Workout_UpdateWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutClient) InsertWorkoutPlan(ctx context.Context, in *InsertWorkoutPlanReq, opts ...grpc.CallOption) (*InsertWorkoutPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertWorkoutPlanRes)
	err := c.cc.Invoke(ctx, Workout_InsertWorkoutPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutServer is the server API for Workout service.
// All implementations must embed UnimplementedWorkoutServer
// for forward compatibility.
type WorkoutServer interface {
	// exercises
	GetExercises(context.Context, *GetExercisesReq) (*GetExercisesRes, error)
	GetExerciseID(context.Context, *GetExerciseIDReq) (*GetExerciseIDRes, error)
	CreateExercise(context.Context, *CreateExerciseReq) (*CreateExerciseRes, error)
	UpdateExercise(context.Context, *UpdateExerciseReq) (*UpdateExerciseRes, error)
	DeleteExercise(context.Context, *DeleteExerciseReq) (*NilRes, error)
	// workout exercises
	GetWorkoutPlanExercises(context.Context, *GetWorkoutPlanExercisesReq) (*GetWorkoutPlanExercisesRes, error)
	GetExerciseByIdWorkoutPlan(context.Context, *GetExerciseByIdWorkoutPlanReq) (*GetExerciseByIdWorkoutPlanRes, error)
	DeleteExerciseByIdWorkoutPlan(context.Context, *DeleteExerciseByIdWorkoutPlanReq) (*NilRes, error)
	UpdateExerciseByIdWorkoutPlan(context.Context, *UpdateExerciseByIdWorkoutPlanReq) (*UpdateExerciseByIdWorkoutPlanRes, error)
	InsertExerciseWorkoutPlan(context.Context, *InsertExerciseWorkoutPlanReq) (*NilRes, error)
	// workouts
	GetWorkoutPlans(context.Context, *GetWorkoutPlansReq) (*GetWorkoutPlansRes, error)
	GetWorkoutPlan(context.Context, *GetWorkoutPlanReq) (*GetWorkoutPlanRes, error)
	DeleteWorkoutPlan(context.Context, *DeleteWorkoutPlanReq) (*NilRes, error)
	UpdateWorkoutPlan(context.Context, *UpdateWorkoutPlanReq) (*UpdateWorkoutPlanRes, error)
	InsertWorkoutPlan(context.Context, *InsertWorkoutPlanReq) (*InsertWorkoutPlanRes, error)
	mustEmbedUnimplementedWorkoutServer()
}

// UnimplementedWorkoutServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkoutServer struct{}

func (UnimplementedWorkoutServer) GetExercises(context.Context, *GetExercisesReq) (*GetExercisesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedWorkoutServer) GetExerciseID(context.Context, *GetExerciseIDReq) (*GetExerciseIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseID not implemented")
}
func (UnimplementedWorkoutServer) CreateExercise(context.Context, *CreateExerciseReq) (*CreateExerciseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
}
func (UnimplementedWorkoutServer) UpdateExercise(context.Context, *UpdateExerciseReq) (*UpdateExerciseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedWorkoutServer) DeleteExercise(context.Context, *DeleteExerciseReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedWorkoutServer) GetWorkoutPlanExercises(context.Context, *GetWorkoutPlanExercisesReq) (*GetWorkoutPlanExercisesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkoutPlanExercises not implemented")
}
func (UnimplementedWorkoutServer) GetExerciseByIdWorkoutPlan(context.Context, *GetExerciseByIdWorkoutPlanReq) (*GetExerciseByIdWorkoutPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseByIdWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) DeleteExerciseByIdWorkoutPlan(context.Context, *DeleteExerciseByIdWorkoutPlanReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExerciseByIdWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) UpdateExerciseByIdWorkoutPlan(context.Context, *UpdateExerciseByIdWorkoutPlanReq) (*UpdateExerciseByIdWorkoutPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExerciseByIdWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) InsertExerciseWorkoutPlan(context.Context, *InsertExerciseWorkoutPlanReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertExerciseWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) GetWorkoutPlans(context.Context, *GetWorkoutPlansReq) (*GetWorkoutPlansRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkoutPlans not implemented")
}
func (UnimplementedWorkoutServer) GetWorkoutPlan(context.Context, *GetWorkoutPlanReq) (*GetWorkoutPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) DeleteWorkoutPlan(context.Context, *DeleteWorkoutPlanReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) UpdateWorkoutPlan(context.Context, *UpdateWorkoutPlanReq) (*UpdateWorkoutPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) InsertWorkoutPlan(context.Context, *InsertWorkoutPlanReq) (*InsertWorkoutPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertWorkoutPlan not implemented")
}
func (UnimplementedWorkoutServer) mustEmbedUnimplementedWorkoutServer() {}
func (UnimplementedWorkoutServer) testEmbeddedByValue()                 {}

// UnsafeWorkoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkoutServer will
// result in compilation errors.
type UnsafeWorkoutServer interface {
	mustEmbedUnimplementedWorkoutServer()
}

func RegisterWorkoutServer(s grpc.ServiceRegistrar, srv WorkoutServer) {
	// If the following call pancis, it indicates UnimplementedWorkoutServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Workout_ServiceDesc, srv)
}

func _Workout_GetExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExercisesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetExercises(ctx, req.(*GetExercisesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_GetExerciseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetExerciseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetExerciseID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetExerciseID(ctx, req.(*GetExerciseIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_CreateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExerciseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_CreateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).CreateExercise(ctx, req.(*CreateExerciseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_UpdateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).UpdateExercise(ctx, req.(*UpdateExerciseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_DeleteExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).DeleteExercise(ctx, req.(*DeleteExerciseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_GetWorkoutPlanExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutPlanExercisesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetWorkoutPlanExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetWorkoutPlanExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetWorkoutPlanExercises(ctx, req.(*GetWorkoutPlanExercisesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_GetExerciseByIdWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseByIdWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetExerciseByIdWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetExerciseByIdWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetExerciseByIdWorkoutPlan(ctx, req.(*GetExerciseByIdWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_DeleteExerciseByIdWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseByIdWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).DeleteExerciseByIdWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_DeleteExerciseByIdWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).DeleteExerciseByIdWorkoutPlan(ctx, req.(*DeleteExerciseByIdWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_UpdateExerciseByIdWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseByIdWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).UpdateExerciseByIdWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_UpdateExerciseByIdWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).UpdateExerciseByIdWorkoutPlan(ctx, req.(*UpdateExerciseByIdWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_InsertExerciseWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertExerciseWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).InsertExerciseWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_InsertExerciseWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).InsertExerciseWorkoutPlan(ctx, req.(*InsertExerciseWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_GetWorkoutPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutPlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetWorkoutPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetWorkoutPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetWorkoutPlans(ctx, req.(*GetWorkoutPlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_GetWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).GetWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_GetWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).GetWorkoutPlan(ctx, req.(*GetWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_DeleteWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).DeleteWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_DeleteWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).DeleteWorkoutPlan(ctx, req.(*DeleteWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_UpdateWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).UpdateWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_UpdateWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).UpdateWorkoutPlan(ctx, req.(*UpdateWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workout_InsertWorkoutPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertWorkoutPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServer).InsertWorkoutPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workout_InsertWorkoutPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServer).InsertWorkoutPlan(ctx, req.(*InsertWorkoutPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Workout_ServiceDesc is the grpc.ServiceDesc for Workout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.workout.Workout",
	HandlerType: (*WorkoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExercises",
			Handler:    _Workout_GetExercises_Handler,
		},
		{
			MethodName: "GetExerciseID",
			Handler:    _Workout_GetExerciseID_Handler,
		},
		{
			MethodName: "CreateExercise",
			Handler:    _Workout_CreateExercise_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _Workout_UpdateExercise_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _Workout_DeleteExercise_Handler,
		},
		{
			MethodName: "GetWorkoutPlanExercises",
			Handler:    _Workout_GetWorkoutPlanExercises_Handler,
		},
		{
			MethodName: "GetExerciseByIdWorkoutPlan",
			Handler:    _Workout_GetExerciseByIdWorkoutPlan_Handler,
		},
		{
			MethodName: "DeleteExerciseByIdWorkoutPlan",
			Handler:    _Workout_DeleteExerciseByIdWorkoutPlan_Handler,
		},
		{
			MethodName: "UpdateExerciseByIdWorkoutPlan",
			Handler:    _Workout_UpdateExerciseByIdWorkoutPlan_Handler,
		},
		{
			MethodName: "InsertExerciseWorkoutPlan",
			Handler:    _Workout_InsertExerciseWorkoutPlan_Handler,
		},
		{
			MethodName: "GetWorkoutPlans",
			Handler:    _Workout_GetWorkoutPlans_Handler,
		},
		{
			MethodName: "GetWorkoutPlan",
			Handler:    _Workout_GetWorkoutPlan_Handler,
		},
		{
			MethodName: "DeleteWorkoutPlan",
			Handler:    _Workout_DeleteWorkoutPlan_Handler,
		},
		{
			MethodName: "UpdateWorkoutPlan",
			Handler:    _Workout_UpdateWorkoutPlan_Handler,
		},
		{
			MethodName: "InsertWorkoutPlan",
			Handler:    _Workout_InsertWorkoutPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workout.proto",
}
