// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: shopping.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shopping_GenerateShoppingList_FullMethodName = "/fitSphere.shopping.Shopping/GenerateShoppingList"
	Shopping_GetShoppingList_FullMethodName      = "/fitSphere.shopping.Shopping/GetShoppingList"
	Shopping_UpdateShoppingList_FullMethodName   = "/fitSphere.shopping.Shopping/UpdateShoppingList"
	Shopping_DeleteShoppingList_FullMethodName   = "/fitSphere.shopping.Shopping/DeleteShoppingList"
)

// ShoppingClient is the client API for Shopping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Recipes Service
type ShoppingClient interface {
	GenerateShoppingList(ctx context.Context, in *GenerateShoppingListReq, opts ...grpc.CallOption) (*GenerateShoppingListRes, error)
	GetShoppingList(ctx context.Context, in *GetShoppingListReq, opts ...grpc.CallOption) (*GetShoppingListRes, error)
	UpdateShoppingList(ctx context.Context, in *UpdateShoppingListReq, opts ...grpc.CallOption) (*UpdateShoppingListRes, error)
	DeleteShoppingList(ctx context.Context, in *DeleteShoppingListReq, opts ...grpc.CallOption) (*NilRes, error)
}

type shoppingClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingClient(cc grpc.ClientConnInterface) ShoppingClient {
	return &shoppingClient{cc}
}

func (c *shoppingClient) GenerateShoppingList(ctx context.Context, in *GenerateShoppingListReq, opts ...grpc.CallOption) (*GenerateShoppingListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateShoppingListRes)
	err := c.cc.Invoke(ctx, Shopping_GenerateShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingClient) GetShoppingList(ctx context.Context, in *GetShoppingListReq, opts ...grpc.CallOption) (*GetShoppingListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShoppingListRes)
	err := c.cc.Invoke(ctx, Shopping_GetShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingClient) UpdateShoppingList(ctx context.Context, in *UpdateShoppingListReq, opts ...grpc.CallOption) (*UpdateShoppingListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShoppingListRes)
	err := c.cc.Invoke(ctx, Shopping_UpdateShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingClient) DeleteShoppingList(ctx context.Context, in *DeleteShoppingListReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Shopping_DeleteShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingServer is the server API for Shopping service.
// All implementations must embed UnimplementedShoppingServer
// for forward compatibility.
//
// Recipes Service
type ShoppingServer interface {
	GenerateShoppingList(context.Context, *GenerateShoppingListReq) (*GenerateShoppingListRes, error)
	GetShoppingList(context.Context, *GetShoppingListReq) (*GetShoppingListRes, error)
	UpdateShoppingList(context.Context, *UpdateShoppingListReq) (*UpdateShoppingListRes, error)
	DeleteShoppingList(context.Context, *DeleteShoppingListReq) (*NilRes, error)
	mustEmbedUnimplementedShoppingServer()
}

// UnimplementedShoppingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingServer struct{}

func (UnimplementedShoppingServer) GenerateShoppingList(context.Context, *GenerateShoppingListReq) (*GenerateShoppingListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShoppingList not implemented")
}
func (UnimplementedShoppingServer) GetShoppingList(context.Context, *GetShoppingListReq) (*GetShoppingListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShoppingList not implemented")
}
func (UnimplementedShoppingServer) UpdateShoppingList(context.Context, *UpdateShoppingListReq) (*UpdateShoppingListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShoppingList not implemented")
}
func (UnimplementedShoppingServer) DeleteShoppingList(context.Context, *DeleteShoppingListReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShoppingList not implemented")
}
func (UnimplementedShoppingServer) mustEmbedUnimplementedShoppingServer() {}
func (UnimplementedShoppingServer) testEmbeddedByValue()                  {}

// UnsafeShoppingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingServer will
// result in compilation errors.
type UnsafeShoppingServer interface {
	mustEmbedUnimplementedShoppingServer()
}

func RegisterShoppingServer(s grpc.ServiceRegistrar, srv ShoppingServer) {
	// If the following call pancis, it indicates UnimplementedShoppingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shopping_ServiceDesc, srv)
}

func _Shopping_GenerateShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShoppingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServer).GenerateShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shopping_GenerateShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServer).GenerateShoppingList(ctx, req.(*GenerateShoppingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shopping_GetShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShoppingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServer).GetShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shopping_GetShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServer).GetShoppingList(ctx, req.(*GetShoppingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shopping_UpdateShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShoppingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServer).UpdateShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shopping_UpdateShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServer).UpdateShoppingList(ctx, req.(*UpdateShoppingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shopping_DeleteShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShoppingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServer).DeleteShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shopping_DeleteShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServer).DeleteShoppingList(ctx, req.(*DeleteShoppingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Shopping_ServiceDesc is the grpc.ServiceDesc for Shopping service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shopping_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.shopping.Shopping",
	HandlerType: (*ShoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShoppingList",
			Handler:    _Shopping_GenerateShoppingList_Handler,
		},
		{
			MethodName: "GetShoppingList",
			Handler:    _Shopping_GetShoppingList_Handler,
		},
		{
			MethodName: "UpdateShoppingList",
			Handler:    _Shopping_UpdateShoppingList_Handler,
		},
		{
			MethodName: "DeleteShoppingList",
			Handler:    _Shopping_DeleteShoppingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopping.proto",
}
