// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: meal.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrackMealProgress_GetUserProgress_FullMethodName  = "/fitSphere.meal_plan.TrackMealProgress/GetUserProgress"
	TrackMealProgress_GetAllProgress_FullMethodName   = "/fitSphere.meal_plan.TrackMealProgress/GetAllProgress"
	TrackMealProgress_GetAllStatistics_FullMethodName = "/fitSphere.meal_plan.TrackMealProgress/GetAllStatistics"
)

// TrackMealProgressClient is the client API for TrackMealProgress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Progress meals
type TrackMealProgressClient interface {
	GetUserProgress(ctx context.Context, in *GetUserProgressReq, opts ...grpc.CallOption) (*GetUserProgressRes, error)
	GetAllProgress(ctx context.Context, in *GetAllProgressReq, opts ...grpc.CallOption) (*GetAllProgressRes, error)
	GetAllStatistics(ctx context.Context, in *GetAllStatisticsReq, opts ...grpc.CallOption) (*GetAllStatisticsRes, error)
}

type trackMealProgressClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackMealProgressClient(cc grpc.ClientConnInterface) TrackMealProgressClient {
	return &trackMealProgressClient{cc}
}

func (c *trackMealProgressClient) GetUserProgress(ctx context.Context, in *GetUserProgressReq, opts ...grpc.CallOption) (*GetUserProgressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProgressRes)
	err := c.cc.Invoke(ctx, TrackMealProgress_GetUserProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackMealProgressClient) GetAllProgress(ctx context.Context, in *GetAllProgressReq, opts ...grpc.CallOption) (*GetAllProgressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProgressRes)
	err := c.cc.Invoke(ctx, TrackMealProgress_GetAllProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackMealProgressClient) GetAllStatistics(ctx context.Context, in *GetAllStatisticsReq, opts ...grpc.CallOption) (*GetAllStatisticsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStatisticsRes)
	err := c.cc.Invoke(ctx, TrackMealProgress_GetAllStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackMealProgressServer is the server API for TrackMealProgress service.
// All implementations must embed UnimplementedTrackMealProgressServer
// for forward compatibility.
//
// Progress meals
type TrackMealProgressServer interface {
	GetUserProgress(context.Context, *GetUserProgressReq) (*GetUserProgressRes, error)
	GetAllProgress(context.Context, *GetAllProgressReq) (*GetAllProgressRes, error)
	GetAllStatistics(context.Context, *GetAllStatisticsReq) (*GetAllStatisticsRes, error)
	mustEmbedUnimplementedTrackMealProgressServer()
}

// UnimplementedTrackMealProgressServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackMealProgressServer struct{}

func (UnimplementedTrackMealProgressServer) GetUserProgress(context.Context, *GetUserProgressReq) (*GetUserProgressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProgress not implemented")
}
func (UnimplementedTrackMealProgressServer) GetAllProgress(context.Context, *GetAllProgressReq) (*GetAllProgressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProgress not implemented")
}
func (UnimplementedTrackMealProgressServer) GetAllStatistics(context.Context, *GetAllStatisticsReq) (*GetAllStatisticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStatistics not implemented")
}
func (UnimplementedTrackMealProgressServer) mustEmbedUnimplementedTrackMealProgressServer() {}
func (UnimplementedTrackMealProgressServer) testEmbeddedByValue()                           {}

// UnsafeTrackMealProgressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackMealProgressServer will
// result in compilation errors.
type UnsafeTrackMealProgressServer interface {
	mustEmbedUnimplementedTrackMealProgressServer()
}

func RegisterTrackMealProgressServer(s grpc.ServiceRegistrar, srv TrackMealProgressServer) {
	// If the following call pancis, it indicates UnimplementedTrackMealProgressServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrackMealProgress_ServiceDesc, srv)
}

func _TrackMealProgress_GetUserProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMealProgressServer).GetUserProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackMealProgress_GetUserProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMealProgressServer).GetUserProgress(ctx, req.(*GetUserProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackMealProgress_GetAllProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMealProgressServer).GetAllProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackMealProgress_GetAllProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMealProgressServer).GetAllProgress(ctx, req.(*GetAllProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackMealProgress_GetAllStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMealProgressServer).GetAllStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackMealProgress_GetAllStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMealProgressServer).GetAllStatistics(ctx, req.(*GetAllStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackMealProgress_ServiceDesc is the grpc.ServiceDesc for TrackMealProgress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackMealProgress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.TrackMealProgress",
	HandlerType: (*TrackMealProgressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProgress",
			Handler:    _TrackMealProgress_GetUserProgress_Handler,
		},
		{
			MethodName: "GetAllProgress",
			Handler:    _TrackMealProgress_GetAllProgress_Handler,
		},
		{
			MethodName: "GetAllStatistics",
			Handler:    _TrackMealProgress_GetAllStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	MealPlan_GetMealPlan_FullMethodName              = "/fitSphere.meal_plan.MealPlan/GetMealPlan"
	MealPlan_GetMealPlans_FullMethodName             = "/fitSphere.meal_plan.MealPlan/GetMealPlans"
	MealPlan_CreateMealPlan_FullMethodName           = "/fitSphere.meal_plan.MealPlan/CreateMealPlan"
	MealPlan_UpdateMealPlan_FullMethodName           = "/fitSphere.meal_plan.MealPlan/UpdateMealPlan"
	MealPlan_DeleteMealPlan_FullMethodName           = "/fitSphere.meal_plan.MealPlan/DeleteMealPlan"
	MealPlan_GetMeal_FullMethodName                  = "/fitSphere.meal_plan.MealPlan/GetMeal"
	MealPlan_GetMeals_FullMethodName                 = "/fitSphere.meal_plan.MealPlan/GetMeals"
	MealPlan_CreateMeal_FullMethodName               = "/fitSphere.meal_plan.MealPlan/CreateMeal"
	MealPlan_UpdateMeal_FullMethodName               = "/fitSphere.meal_plan.MealPlan/UpdateMeal"
	MealPlan_DeleteMeal_FullMethodName               = "/fitSphere.meal_plan.MealPlan/DeleteMeal"
	MealPlan_AddIngredientToMeal_FullMethodName      = "/fitSphere.meal_plan.MealPlan/AddIngredientToMeal"
	MealPlan_RemoveIngredientFromMeal_FullMethodName = "/fitSphere.meal_plan.MealPlan/RemoveIngredientFromMeal"
	MealPlan_UpdateIngredientInMeal_FullMethodName   = "/fitSphere.meal_plan.MealPlan/UpdateIngredientInMeal"
	MealPlan_GetMealIngredients_FullMethodName       = "/fitSphere.meal_plan.MealPlan/GetMealIngredients"
	MealPlan_GetMealIngredient_FullMethodName        = "/fitSphere.meal_plan.MealPlan/GetMealIngredient"
)

// MealPlanClient is the client API for MealPlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MealPlan Service
type MealPlanClient interface {
	GetMealPlan(ctx context.Context, in *GetMealPlanReq, opts ...grpc.CallOption) (*GetMealPlanRes, error)
	GetMealPlans(ctx context.Context, in *GetMealPlansReq, opts ...grpc.CallOption) (*GetMealPlansRes, error)
	CreateMealPlan(ctx context.Context, in *CreateMealPlanReq, opts ...grpc.CallOption) (*CreateMealPlanRes, error)
	UpdateMealPlan(ctx context.Context, in *UpdateMealPlanReq, opts ...grpc.CallOption) (*UpdateMealPlanRes, error)
	DeleteMealPlan(ctx context.Context, in *DeleteMealPlanReq, opts ...grpc.CallOption) (*NilRes, error)
	// Meals
	GetMeal(ctx context.Context, in *GetMealReq, opts ...grpc.CallOption) (*GetMealRes, error)
	GetMeals(ctx context.Context, in *GetMealsReq, opts ...grpc.CallOption) (*GetMealsRes, error)
	CreateMeal(ctx context.Context, in *CreateMealReq, opts ...grpc.CallOption) (*CreateMealRes, error)
	UpdateMeal(ctx context.Context, in *UpdateMealReq, opts ...grpc.CallOption) (*UpdateMealRes, error)
	DeleteMeal(ctx context.Context, in *DeleteMealReq, opts ...grpc.CallOption) (*NilRes, error)
	AddIngredientToMeal(ctx context.Context, in *AddIngredientReq, opts ...grpc.CallOption) (*AddIngredientRes, error)
	RemoveIngredientFromMeal(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error)
	UpdateIngredientInMeal(ctx context.Context, in *UpdateMealIngredientReq, opts ...grpc.CallOption) (*UpdateMealIngredientRes, error)
	GetMealIngredients(ctx context.Context, in *GetMealIngredientsReq, opts ...grpc.CallOption) (*GetMealIngredientsRes, error)
	GetMealIngredient(ctx context.Context, in *GetMealIngredientReq, opts ...grpc.CallOption) (*GetMealIngredientRes, error)
}

type mealPlanClient struct {
	cc grpc.ClientConnInterface
}

func NewMealPlanClient(cc grpc.ClientConnInterface) MealPlanClient {
	return &mealPlanClient{cc}
}

func (c *mealPlanClient) GetMealPlan(ctx context.Context, in *GetMealPlanReq, opts ...grpc.CallOption) (*GetMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMealPlans(ctx context.Context, in *GetMealPlansReq, opts ...grpc.CallOption) (*GetMealPlansRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealPlansRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) CreateMealPlan(ctx context.Context, in *CreateMealPlanReq, opts ...grpc.CallOption) (*CreateMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_CreateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) UpdateMealPlan(ctx context.Context, in *UpdateMealPlanReq, opts ...grpc.CallOption) (*UpdateMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_UpdateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) DeleteMealPlan(ctx context.Context, in *DeleteMealPlanReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_DeleteMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMeal(ctx context.Context, in *GetMealReq, opts ...grpc.CallOption) (*GetMealRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMeals(ctx context.Context, in *GetMealsReq, opts ...grpc.CallOption) (*GetMealsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealsRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) CreateMeal(ctx context.Context, in *CreateMealReq, opts ...grpc.CallOption) (*CreateMealRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMealRes)
	err := c.cc.Invoke(ctx, MealPlan_CreateMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) UpdateMeal(ctx context.Context, in *UpdateMealReq, opts ...grpc.CallOption) (*UpdateMealRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMealRes)
	err := c.cc.Invoke(ctx, MealPlan_UpdateMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) DeleteMeal(ctx context.Context, in *DeleteMealReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_DeleteMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) AddIngredientToMeal(ctx context.Context, in *AddIngredientReq, opts ...grpc.CallOption) (*AddIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIngredientRes)
	err := c.cc.Invoke(ctx, MealPlan_AddIngredientToMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) RemoveIngredientFromMeal(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_RemoveIngredientFromMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) UpdateIngredientInMeal(ctx context.Context, in *UpdateMealIngredientReq, opts ...grpc.CallOption) (*UpdateMealIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMealIngredientRes)
	err := c.cc.Invoke(ctx, MealPlan_UpdateIngredientInMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMealIngredients(ctx context.Context, in *GetMealIngredientsReq, opts ...grpc.CallOption) (*GetMealIngredientsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealIngredientsRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMealIngredient(ctx context.Context, in *GetMealIngredientReq, opts ...grpc.CallOption) (*GetMealIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealIngredientRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealPlanServer is the server API for MealPlan service.
// All implementations must embed UnimplementedMealPlanServer
// for forward compatibility.
//
// MealPlan Service
type MealPlanServer interface {
	GetMealPlan(context.Context, *GetMealPlanReq) (*GetMealPlanRes, error)
	GetMealPlans(context.Context, *GetMealPlansReq) (*GetMealPlansRes, error)
	CreateMealPlan(context.Context, *CreateMealPlanReq) (*CreateMealPlanRes, error)
	UpdateMealPlan(context.Context, *UpdateMealPlanReq) (*UpdateMealPlanRes, error)
	DeleteMealPlan(context.Context, *DeleteMealPlanReq) (*NilRes, error)
	// Meals
	GetMeal(context.Context, *GetMealReq) (*GetMealRes, error)
	GetMeals(context.Context, *GetMealsReq) (*GetMealsRes, error)
	CreateMeal(context.Context, *CreateMealReq) (*CreateMealRes, error)
	UpdateMeal(context.Context, *UpdateMealReq) (*UpdateMealRes, error)
	DeleteMeal(context.Context, *DeleteMealReq) (*NilRes, error)
	AddIngredientToMeal(context.Context, *AddIngredientReq) (*AddIngredientRes, error)
	RemoveIngredientFromMeal(context.Context, *DeleteIngredientReq) (*NilRes, error)
	UpdateIngredientInMeal(context.Context, *UpdateMealIngredientReq) (*UpdateMealIngredientRes, error)
	GetMealIngredients(context.Context, *GetMealIngredientsReq) (*GetMealIngredientsRes, error)
	GetMealIngredient(context.Context, *GetMealIngredientReq) (*GetMealIngredientRes, error)
	mustEmbedUnimplementedMealPlanServer()
}

// UnimplementedMealPlanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealPlanServer struct{}

func (UnimplementedMealPlanServer) GetMealPlan(context.Context, *GetMealPlanReq) (*GetMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlan not implemented")
}
func (UnimplementedMealPlanServer) GetMealPlans(context.Context, *GetMealPlansReq) (*GetMealPlansRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlans not implemented")
}
func (UnimplementedMealPlanServer) CreateMealPlan(context.Context, *CreateMealPlanReq) (*CreateMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlan not implemented")
}
func (UnimplementedMealPlanServer) UpdateMealPlan(context.Context, *UpdateMealPlanReq) (*UpdateMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlan not implemented")
}
func (UnimplementedMealPlanServer) DeleteMealPlan(context.Context, *DeleteMealPlanReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMealPlan not implemented")
}
func (UnimplementedMealPlanServer) GetMeal(context.Context, *GetMealReq) (*GetMealRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeal not implemented")
}
func (UnimplementedMealPlanServer) GetMeals(context.Context, *GetMealsReq) (*GetMealsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedMealPlanServer) CreateMeal(context.Context, *CreateMealReq) (*CreateMealRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeal not implemented")
}
func (UnimplementedMealPlanServer) UpdateMeal(context.Context, *UpdateMealReq) (*UpdateMealRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeal not implemented")
}
func (UnimplementedMealPlanServer) DeleteMeal(context.Context, *DeleteMealReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeal not implemented")
}
func (UnimplementedMealPlanServer) AddIngredientToMeal(context.Context, *AddIngredientReq) (*AddIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIngredientToMeal not implemented")
}
func (UnimplementedMealPlanServer) RemoveIngredientFromMeal(context.Context, *DeleteIngredientReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIngredientFromMeal not implemented")
}
func (UnimplementedMealPlanServer) UpdateIngredientInMeal(context.Context, *UpdateMealIngredientReq) (*UpdateMealIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredientInMeal not implemented")
}
func (UnimplementedMealPlanServer) GetMealIngredients(context.Context, *GetMealIngredientsReq) (*GetMealIngredientsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealIngredients not implemented")
}
func (UnimplementedMealPlanServer) GetMealIngredient(context.Context, *GetMealIngredientReq) (*GetMealIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealIngredient not implemented")
}
func (UnimplementedMealPlanServer) mustEmbedUnimplementedMealPlanServer() {}
func (UnimplementedMealPlanServer) testEmbeddedByValue()                  {}

// UnsafeMealPlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealPlanServer will
// result in compilation errors.
type UnsafeMealPlanServer interface {
	mustEmbedUnimplementedMealPlanServer()
}

func RegisterMealPlanServer(s grpc.ServiceRegistrar, srv MealPlanServer) {
	// If the following call pancis, it indicates UnimplementedMealPlanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealPlan_ServiceDesc, srv)
}

func _MealPlan_GetMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealPlan(ctx, req.(*GetMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMealPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealPlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealPlans(ctx, req.(*GetMealPlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_CreateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).CreateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_CreateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).CreateMealPlan(ctx, req.(*CreateMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_UpdateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).UpdateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_UpdateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).UpdateMealPlan(ctx, req.(*UpdateMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_DeleteMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).DeleteMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_DeleteMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).DeleteMealPlan(ctx, req.(*DeleteMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMeal(ctx, req.(*GetMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMeals(ctx, req.(*GetMealsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_CreateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).CreateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_CreateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).CreateMeal(ctx, req.(*CreateMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_UpdateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).UpdateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_UpdateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).UpdateMeal(ctx, req.(*UpdateMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_DeleteMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).DeleteMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_DeleteMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).DeleteMeal(ctx, req.(*DeleteMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_AddIngredientToMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).AddIngredientToMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_AddIngredientToMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).AddIngredientToMeal(ctx, req.(*AddIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_RemoveIngredientFromMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).RemoveIngredientFromMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_RemoveIngredientFromMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).RemoveIngredientFromMeal(ctx, req.(*DeleteIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_UpdateIngredientInMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).UpdateIngredientInMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_UpdateIngredientInMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).UpdateIngredientInMeal(ctx, req.(*UpdateMealIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMealIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealIngredientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealIngredients(ctx, req.(*GetMealIngredientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMealIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealIngredient(ctx, req.(*GetMealIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MealPlan_ServiceDesc is the grpc.ServiceDesc for MealPlan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealPlan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.MealPlan",
	HandlerType: (*MealPlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMealPlan",
			Handler:    _MealPlan_GetMealPlan_Handler,
		},
		{
			MethodName: "GetMealPlans",
			Handler:    _MealPlan_GetMealPlans_Handler,
		},
		{
			MethodName: "CreateMealPlan",
			Handler:    _MealPlan_CreateMealPlan_Handler,
		},
		{
			MethodName: "UpdateMealPlan",
			Handler:    _MealPlan_UpdateMealPlan_Handler,
		},
		{
			MethodName: "DeleteMealPlan",
			Handler:    _MealPlan_DeleteMealPlan_Handler,
		},
		{
			MethodName: "GetMeal",
			Handler:    _MealPlan_GetMeal_Handler,
		},
		{
			MethodName: "GetMeals",
			Handler:    _MealPlan_GetMeals_Handler,
		},
		{
			MethodName: "CreateMeal",
			Handler:    _MealPlan_CreateMeal_Handler,
		},
		{
			MethodName: "UpdateMeal",
			Handler:    _MealPlan_UpdateMeal_Handler,
		},
		{
			MethodName: "DeleteMeal",
			Handler:    _MealPlan_DeleteMeal_Handler,
		},
		{
			MethodName: "AddIngredientToMeal",
			Handler:    _MealPlan_AddIngredientToMeal_Handler,
		},
		{
			MethodName: "RemoveIngredientFromMeal",
			Handler:    _MealPlan_RemoveIngredientFromMeal_Handler,
		},
		{
			MethodName: "UpdateIngredientInMeal",
			Handler:    _MealPlan_UpdateIngredientInMeal_Handler,
		},
		{
			MethodName: "GetMealIngredients",
			Handler:    _MealPlan_GetMealIngredients_Handler,
		},
		{
			MethodName: "GetMealIngredient",
			Handler:    _MealPlan_GetMealIngredient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	Ingredients_GetIngredients_FullMethodName   = "/fitSphere.meal_plan.Ingredients/GetIngredients"
	Ingredients_GetIngredient_FullMethodName    = "/fitSphere.meal_plan.Ingredients/GetIngredient"
	Ingredients_CreateIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/CreateIngredient"
	Ingredients_UpdateIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/UpdateIngredient"
	Ingredients_DeleteIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/DeleteIngredient"
)

// IngredientsClient is the client API for Ingredients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ingredients Service done
type IngredientsClient interface {
	GetIngredients(ctx context.Context, in *GetIngredientsReq, opts ...grpc.CallOption) (*GetIngredientsRes, error)
	GetIngredient(ctx context.Context, in *GetIngredientReq, opts ...grpc.CallOption) (*GetIngredientRes, error)
	CreateIngredient(ctx context.Context, in *CreateIngredientReq, opts ...grpc.CallOption) (*CreateIngredientRes, error)
	UpdateIngredient(ctx context.Context, in *UpdateIngredientReq, opts ...grpc.CallOption) (*UpdateIngredientRes, error)
	DeleteIngredient(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error)
}

type ingredientsClient struct {
	cc grpc.ClientConnInterface
}

func NewIngredientsClient(cc grpc.ClientConnInterface) IngredientsClient {
	return &ingredientsClient{cc}
}

func (c *ingredientsClient) GetIngredients(ctx context.Context, in *GetIngredientsReq, opts ...grpc.CallOption) (*GetIngredientsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngredientsRes)
	err := c.cc.Invoke(ctx, Ingredients_GetIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) GetIngredient(ctx context.Context, in *GetIngredientReq, opts ...grpc.CallOption) (*GetIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_GetIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) CreateIngredient(ctx context.Context, in *CreateIngredientReq, opts ...grpc.CallOption) (*CreateIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_CreateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) UpdateIngredient(ctx context.Context, in *UpdateIngredientReq, opts ...grpc.CallOption) (*UpdateIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_UpdateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) DeleteIngredient(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Ingredients_DeleteIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngredientsServer is the server API for Ingredients service.
// All implementations must embed UnimplementedIngredientsServer
// for forward compatibility.
//
// Ingredients Service done
type IngredientsServer interface {
	GetIngredients(context.Context, *GetIngredientsReq) (*GetIngredientsRes, error)
	GetIngredient(context.Context, *GetIngredientReq) (*GetIngredientRes, error)
	CreateIngredient(context.Context, *CreateIngredientReq) (*CreateIngredientRes, error)
	UpdateIngredient(context.Context, *UpdateIngredientReq) (*UpdateIngredientRes, error)
	DeleteIngredient(context.Context, *DeleteIngredientReq) (*NilRes, error)
	mustEmbedUnimplementedIngredientsServer()
}

// UnimplementedIngredientsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngredientsServer struct{}

func (UnimplementedIngredientsServer) GetIngredients(context.Context, *GetIngredientsReq) (*GetIngredientsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredients not implemented")
}
func (UnimplementedIngredientsServer) GetIngredient(context.Context, *GetIngredientReq) (*GetIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredient not implemented")
}
func (UnimplementedIngredientsServer) CreateIngredient(context.Context, *CreateIngredientReq) (*CreateIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedIngredientsServer) UpdateIngredient(context.Context, *UpdateIngredientReq) (*UpdateIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredient not implemented")
}
func (UnimplementedIngredientsServer) DeleteIngredient(context.Context, *DeleteIngredientReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngredient not implemented")
}
func (UnimplementedIngredientsServer) mustEmbedUnimplementedIngredientsServer() {}
func (UnimplementedIngredientsServer) testEmbeddedByValue()                     {}

// UnsafeIngredientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngredientsServer will
// result in compilation errors.
type UnsafeIngredientsServer interface {
	mustEmbedUnimplementedIngredientsServer()
}

func RegisterIngredientsServer(s grpc.ServiceRegistrar, srv IngredientsServer) {
	// If the following call pancis, it indicates UnimplementedIngredientsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ingredients_ServiceDesc, srv)
}

func _Ingredients_GetIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngredientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).GetIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_GetIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).GetIngredients(ctx, req.(*GetIngredientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_GetIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).GetIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_GetIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).GetIngredient(ctx, req.(*GetIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_CreateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).CreateIngredient(ctx, req.(*CreateIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_UpdateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).UpdateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_UpdateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).UpdateIngredient(ctx, req.(*UpdateIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_DeleteIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).DeleteIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_DeleteIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).DeleteIngredient(ctx, req.(*DeleteIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ingredients_ServiceDesc is the grpc.ServiceDesc for Ingredients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingredients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.Ingredients",
	HandlerType: (*IngredientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIngredients",
			Handler:    _Ingredients_GetIngredients_Handler,
		},
		{
			MethodName: "GetIngredient",
			Handler:    _Ingredients_GetIngredient_Handler,
		},
		{
			MethodName: "CreateIngredient",
			Handler:    _Ingredients_CreateIngredient_Handler,
		},
		{
			MethodName: "UpdateIngredient",
			Handler:    _Ingredients_UpdateIngredient_Handler,
		},
		{
			MethodName: "DeleteIngredient",
			Handler:    _Ingredients_DeleteIngredient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	MealReminder_CreateReminder_FullMethodName = "/fitSphere.meal_plan.MealReminder/CreateReminder"
	MealReminder_GetReminders_FullMethodName   = "/fitSphere.meal_plan.MealReminder/GetReminders"
	MealReminder_UpdateReminder_FullMethodName = "/fitSphere.meal_plan.MealReminder/UpdateReminder"
	MealReminder_DeleteReminder_FullMethodName = "/fitSphere.meal_plan.MealReminder/DeleteReminder"
)

// MealReminderClient is the client API for MealReminder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealReminderClient interface {
	CreateReminder(ctx context.Context, in *CreateReminderReq, opts ...grpc.CallOption) (*CreateReminderRes, error)
	GetReminders(ctx context.Context, in *GetRemindersReq, opts ...grpc.CallOption) (*GetRemindersRes, error)
	UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*UpdateReminderRes, error)
	DeleteReminder(ctx context.Context, in *DeleteReminderReq, opts ...grpc.CallOption) (*NilRes, error)
}

type mealReminderClient struct {
	cc grpc.ClientConnInterface
}

func NewMealReminderClient(cc grpc.ClientConnInterface) MealReminderClient {
	return &mealReminderClient{cc}
}

func (c *mealReminderClient) CreateReminder(ctx context.Context, in *CreateReminderReq, opts ...grpc.CallOption) (*CreateReminderRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReminderRes)
	err := c.cc.Invoke(ctx, MealReminder_CreateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealReminderClient) GetReminders(ctx context.Context, in *GetRemindersReq, opts ...grpc.CallOption) (*GetRemindersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRemindersRes)
	err := c.cc.Invoke(ctx, MealReminder_GetReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealReminderClient) UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*UpdateReminderRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReminderRes)
	err := c.cc.Invoke(ctx, MealReminder_UpdateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealReminderClient) DeleteReminder(ctx context.Context, in *DeleteReminderReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealReminder_DeleteReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealReminderServer is the server API for MealReminder service.
// All implementations must embed UnimplementedMealReminderServer
// for forward compatibility.
type MealReminderServer interface {
	CreateReminder(context.Context, *CreateReminderReq) (*CreateReminderRes, error)
	GetReminders(context.Context, *GetRemindersReq) (*GetRemindersRes, error)
	UpdateReminder(context.Context, *UpdateReminderReq) (*UpdateReminderRes, error)
	DeleteReminder(context.Context, *DeleteReminderReq) (*NilRes, error)
	mustEmbedUnimplementedMealReminderServer()
}

// UnimplementedMealReminderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealReminderServer struct{}

func (UnimplementedMealReminderServer) CreateReminder(context.Context, *CreateReminderReq) (*CreateReminderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedMealReminderServer) GetReminders(context.Context, *GetRemindersReq) (*GetRemindersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminders not implemented")
}
func (UnimplementedMealReminderServer) UpdateReminder(context.Context, *UpdateReminderReq) (*UpdateReminderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}
func (UnimplementedMealReminderServer) DeleteReminder(context.Context, *DeleteReminderReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}
func (UnimplementedMealReminderServer) mustEmbedUnimplementedMealReminderServer() {}
func (UnimplementedMealReminderServer) testEmbeddedByValue()                      {}

// UnsafeMealReminderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealReminderServer will
// result in compilation errors.
type UnsafeMealReminderServer interface {
	mustEmbedUnimplementedMealReminderServer()
}

func RegisterMealReminderServer(s grpc.ServiceRegistrar, srv MealReminderServer) {
	// If the following call pancis, it indicates UnimplementedMealReminderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealReminder_ServiceDesc, srv)
}

func _MealReminder_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealReminderServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealReminder_CreateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealReminderServer).CreateReminder(ctx, req.(*CreateReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealReminder_GetReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemindersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealReminderServer).GetReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealReminder_GetReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealReminderServer).GetReminders(ctx, req.(*GetRemindersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealReminder_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealReminderServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealReminder_UpdateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealReminderServer).UpdateReminder(ctx, req.(*UpdateReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealReminder_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealReminderServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealReminder_DeleteReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealReminderServer).DeleteReminder(ctx, req.(*DeleteReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MealReminder_ServiceDesc is the grpc.ServiceDesc for MealReminder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealReminder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.MealReminder",
	HandlerType: (*MealReminderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReminder",
			Handler:    _MealReminder_CreateReminder_Handler,
		},
		{
			MethodName: "GetReminders",
			Handler:    _MealReminder_GetReminders_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _MealReminder_UpdateReminder_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _MealReminder_DeleteReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	GoalRecommendation_RecommendCalorieObjective_FullMethodName = "/fitSphere.meal_plan.GoalRecommendation/RecommendCalorieObjective"
	GoalRecommendation_AdjustGoals_FullMethodName               = "/fitSphere.meal_plan.GoalRecommendation/AdjustGoals"
	GoalRecommendation_GetGoalSuggestions_FullMethodName        = "/fitSphere.meal_plan.GoalRecommendation/GetGoalSuggestions"
)

// GoalRecommendationClient is the client API for GoalRecommendation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalRecommendationClient interface {
	RecommendCalorieObjective(ctx context.Context, in *RecommendCalorieObjectiveReq, opts ...grpc.CallOption) (*RecommendCalorieObjectiveRes, error)
	AdjustGoals(ctx context.Context, in *AdjustGoalsReq, opts ...grpc.CallOption) (*AdjustGoalsRes, error)
	GetGoalSuggestions(ctx context.Context, in *GetGoalSuggestionsReq, opts ...grpc.CallOption) (*GetGoalSuggestionsRes, error)
}

type goalRecommendationClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalRecommendationClient(cc grpc.ClientConnInterface) GoalRecommendationClient {
	return &goalRecommendationClient{cc}
}

func (c *goalRecommendationClient) RecommendCalorieObjective(ctx context.Context, in *RecommendCalorieObjectiveReq, opts ...grpc.CallOption) (*RecommendCalorieObjectiveRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendCalorieObjectiveRes)
	err := c.cc.Invoke(ctx, GoalRecommendation_RecommendCalorieObjective_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalRecommendationClient) AdjustGoals(ctx context.Context, in *AdjustGoalsReq, opts ...grpc.CallOption) (*AdjustGoalsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustGoalsRes)
	err := c.cc.Invoke(ctx, GoalRecommendation_AdjustGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalRecommendationClient) GetGoalSuggestions(ctx context.Context, in *GetGoalSuggestionsReq, opts ...grpc.CallOption) (*GetGoalSuggestionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoalSuggestionsRes)
	err := c.cc.Invoke(ctx, GoalRecommendation_GetGoalSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalRecommendationServer is the server API for GoalRecommendation service.
// All implementations must embed UnimplementedGoalRecommendationServer
// for forward compatibility.
type GoalRecommendationServer interface {
	RecommendCalorieObjective(context.Context, *RecommendCalorieObjectiveReq) (*RecommendCalorieObjectiveRes, error)
	AdjustGoals(context.Context, *AdjustGoalsReq) (*AdjustGoalsRes, error)
	GetGoalSuggestions(context.Context, *GetGoalSuggestionsReq) (*GetGoalSuggestionsRes, error)
	mustEmbedUnimplementedGoalRecommendationServer()
}

// UnimplementedGoalRecommendationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoalRecommendationServer struct{}

func (UnimplementedGoalRecommendationServer) RecommendCalorieObjective(context.Context, *RecommendCalorieObjectiveReq) (*RecommendCalorieObjectiveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendCalorieObjective not implemented")
}
func (UnimplementedGoalRecommendationServer) AdjustGoals(context.Context, *AdjustGoalsReq) (*AdjustGoalsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustGoals not implemented")
}
func (UnimplementedGoalRecommendationServer) GetGoalSuggestions(context.Context, *GetGoalSuggestionsReq) (*GetGoalSuggestionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalSuggestions not implemented")
}
func (UnimplementedGoalRecommendationServer) mustEmbedUnimplementedGoalRecommendationServer() {}
func (UnimplementedGoalRecommendationServer) testEmbeddedByValue()                            {}

// UnsafeGoalRecommendationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalRecommendationServer will
// result in compilation errors.
type UnsafeGoalRecommendationServer interface {
	mustEmbedUnimplementedGoalRecommendationServer()
}

func RegisterGoalRecommendationServer(s grpc.ServiceRegistrar, srv GoalRecommendationServer) {
	// If the following call pancis, it indicates UnimplementedGoalRecommendationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoalRecommendation_ServiceDesc, srv)
}

func _GoalRecommendation_RecommendCalorieObjective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendCalorieObjectiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalRecommendationServer).RecommendCalorieObjective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalRecommendation_RecommendCalorieObjective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalRecommendationServer).RecommendCalorieObjective(ctx, req.(*RecommendCalorieObjectiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalRecommendation_AdjustGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustGoalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalRecommendationServer).AdjustGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalRecommendation_AdjustGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalRecommendationServer).AdjustGoals(ctx, req.(*AdjustGoalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalRecommendation_GetGoalSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalSuggestionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalRecommendationServer).GetGoalSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalRecommendation_GetGoalSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalRecommendationServer).GetGoalSuggestions(ctx, req.(*GetGoalSuggestionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoalRecommendation_ServiceDesc is the grpc.ServiceDesc for GoalRecommendation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoalRecommendation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.GoalRecommendation",
	HandlerType: (*GoalRecommendationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecommendCalorieObjective",
			Handler:    _GoalRecommendation_RecommendCalorieObjective_Handler,
		},
		{
			MethodName: "AdjustGoals",
			Handler:    _GoalRecommendation_AdjustGoals_Handler,
		},
		{
			MethodName: "GetGoalSuggestions",
			Handler:    _GoalRecommendation_GetGoalSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	FoodLogService_LogFood_FullMethodName       = "/fitSphere.meal_plan.FoodLogService/LogFood"
	FoodLogService_GetFoodLogs_FullMethodName   = "/fitSphere.meal_plan.FoodLogService/GetFoodLogs"
	FoodLogService_DeleteFoodLog_FullMethodName = "/fitSphere.meal_plan.FoodLogService/DeleteFoodLog"
)

// FoodLogServiceClient is the client API for FoodLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// log food outside the plan
type FoodLogServiceClient interface {
	LogFood(ctx context.Context, in *LogFoodReq, opts ...grpc.CallOption) (*LogFoodRes, error)
	GetFoodLogs(ctx context.Context, in *GetFoodLogsReq, opts ...grpc.CallOption) (*GetFoodLogsRes, error)
	DeleteFoodLog(ctx context.Context, in *DeleteFoodLogReq, opts ...grpc.CallOption) (*NilRes, error)
}

type foodLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodLogServiceClient(cc grpc.ClientConnInterface) FoodLogServiceClient {
	return &foodLogServiceClient{cc}
}

func (c *foodLogServiceClient) LogFood(ctx context.Context, in *LogFoodReq, opts ...grpc.CallOption) (*LogFoodRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFoodRes)
	err := c.cc.Invoke(ctx, FoodLogService_LogFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodLogServiceClient) GetFoodLogs(ctx context.Context, in *GetFoodLogsReq, opts ...grpc.CallOption) (*GetFoodLogsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFoodLogsRes)
	err := c.cc.Invoke(ctx, FoodLogService_GetFoodLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodLogServiceClient) DeleteFoodLog(ctx context.Context, in *DeleteFoodLogReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, FoodLogService_DeleteFoodLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodLogServiceServer is the server API for FoodLogService service.
// All implementations must embed UnimplementedFoodLogServiceServer
// for forward compatibility.
//
// log food outside the plan
type FoodLogServiceServer interface {
	LogFood(context.Context, *LogFoodReq) (*LogFoodRes, error)
	GetFoodLogs(context.Context, *GetFoodLogsReq) (*GetFoodLogsRes, error)
	DeleteFoodLog(context.Context, *DeleteFoodLogReq) (*NilRes, error)
	mustEmbedUnimplementedFoodLogServiceServer()
}

// UnimplementedFoodLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFoodLogServiceServer struct{}

func (UnimplementedFoodLogServiceServer) LogFood(context.Context, *LogFoodReq) (*LogFoodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFood not implemented")
}
func (UnimplementedFoodLogServiceServer) GetFoodLogs(context.Context, *GetFoodLogsReq) (*GetFoodLogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodLogs not implemented")
}
func (UnimplementedFoodLogServiceServer) DeleteFoodLog(context.Context, *DeleteFoodLogReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFoodLog not implemented")
}
func (UnimplementedFoodLogServiceServer) mustEmbedUnimplementedFoodLogServiceServer() {}
func (UnimplementedFoodLogServiceServer) testEmbeddedByValue()                        {}

// UnsafeFoodLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodLogServiceServer will
// result in compilation errors.
type UnsafeFoodLogServiceServer interface {
	mustEmbedUnimplementedFoodLogServiceServer()
}

func RegisterFoodLogServiceServer(s grpc.ServiceRegistrar, srv FoodLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedFoodLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FoodLogService_ServiceDesc, srv)
}

func _FoodLogService_LogFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodLogServiceServer).LogFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodLogService_LogFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodLogServiceServer).LogFood(ctx, req.(*LogFoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodLogService_GetFoodLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodLogServiceServer).GetFoodLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodLogService_GetFoodLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodLogServiceServer).GetFoodLogs(ctx, req.(*GetFoodLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodLogService_DeleteFoodLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodLogServiceServer).DeleteFoodLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodLogService_DeleteFoodLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodLogServiceServer).DeleteFoodLog(ctx, req.(*DeleteFoodLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodLogService_ServiceDesc is the grpc.ServiceDesc for FoodLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.FoodLogService",
	HandlerType: (*FoodLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFood",
			Handler:    _FoodLogService_LogFood_Handler,
		},
		{
			MethodName: "GetFoodLogs",
			Handler:    _FoodLogService_GetFoodLogs_Handler,
		},
		{
			MethodName: "DeleteFoodLog",
			Handler:    _FoodLogService_DeleteFoodLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	DietPreferenceService_SetDietPreferences_FullMethodName = "/fitSphere.meal_plan.DietPreferenceService/SetDietPreferences"
	DietPreferenceService_GetDietPreferences_FullMethodName = "/fitSphere.meal_plan.DietPreferenceService/GetDietPreferences"
)

// DietPreferenceServiceClient is the client API for DietPreferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// (e.g., vegan, keto)
type DietPreferenceServiceClient interface {
	SetDietPreferences(ctx context.Context, in *UpdateDietPreferencesReq, opts ...grpc.CallOption) (*UpdateDietPreferencesRes, error)
	GetDietPreferences(ctx context.Context, in *GetDietPreferencesReq, opts ...grpc.CallOption) (*GetDietPreferencesRes, error)
}

type dietPreferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDietPreferenceServiceClient(cc grpc.ClientConnInterface) DietPreferenceServiceClient {
	return &dietPreferenceServiceClient{cc}
}

func (c *dietPreferenceServiceClient) SetDietPreferences(ctx context.Context, in *UpdateDietPreferencesReq, opts ...grpc.CallOption) (*UpdateDietPreferencesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDietPreferencesRes)
	err := c.cc.Invoke(ctx, DietPreferenceService_SetDietPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dietPreferenceServiceClient) GetDietPreferences(ctx context.Context, in *GetDietPreferencesReq, opts ...grpc.CallOption) (*GetDietPreferencesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDietPreferencesRes)
	err := c.cc.Invoke(ctx, DietPreferenceService_GetDietPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DietPreferenceServiceServer is the server API for DietPreferenceService service.
// All implementations must embed UnimplementedDietPreferenceServiceServer
// for forward compatibility.
//
// (e.g., vegan, keto)
type DietPreferenceServiceServer interface {
	SetDietPreferences(context.Context, *UpdateDietPreferencesReq) (*UpdateDietPreferencesRes, error)
	GetDietPreferences(context.Context, *GetDietPreferencesReq) (*GetDietPreferencesRes, error)
	mustEmbedUnimplementedDietPreferenceServiceServer()
}

// UnimplementedDietPreferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDietPreferenceServiceServer struct{}

func (UnimplementedDietPreferenceServiceServer) SetDietPreferences(context.Context, *UpdateDietPreferencesReq) (*UpdateDietPreferencesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDietPreferences not implemented")
}
func (UnimplementedDietPreferenceServiceServer) GetDietPreferences(context.Context, *GetDietPreferencesReq) (*GetDietPreferencesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDietPreferences not implemented")
}
func (UnimplementedDietPreferenceServiceServer) mustEmbedUnimplementedDietPreferenceServiceServer() {}
func (UnimplementedDietPreferenceServiceServer) testEmbeddedByValue()                               {}

// UnsafeDietPreferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DietPreferenceServiceServer will
// result in compilation errors.
type UnsafeDietPreferenceServiceServer interface {
	mustEmbedUnimplementedDietPreferenceServiceServer()
}

func RegisterDietPreferenceServiceServer(s grpc.ServiceRegistrar, srv DietPreferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedDietPreferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DietPreferenceService_ServiceDesc, srv)
}

func _DietPreferenceService_SetDietPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDietPreferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DietPreferenceServiceServer).SetDietPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DietPreferenceService_SetDietPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DietPreferenceServiceServer).SetDietPreferences(ctx, req.(*UpdateDietPreferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DietPreferenceService_GetDietPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDietPreferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DietPreferenceServiceServer).GetDietPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DietPreferenceService_GetDietPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DietPreferenceServiceServer).GetDietPreferences(ctx, req.(*GetDietPreferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DietPreferenceService_ServiceDesc is the grpc.ServiceDesc for DietPreferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DietPreferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.DietPreferenceService",
	HandlerType: (*DietPreferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDietPreferences",
			Handler:    _DietPreferenceService_SetDietPreferences_Handler,
		},
		{
			MethodName: "GetDietPreferences",
			Handler:    _DietPreferenceService_GetDietPreferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}
