// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: meal.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MealPlan_GetMealPlan_FullMethodName                  = "/fitSphere.meal_plan.MealPlan/GetMealPlan"
	MealPlan_GetMealPlans_FullMethodName                 = "/fitSphere.meal_plan.MealPlan/GetMealPlans"
	MealPlan_CreateMealPlan_FullMethodName               = "/fitSphere.meal_plan.MealPlan/CreateMealPlan"
	MealPlan_UpdateMealPlan_FullMethodName               = "/fitSphere.meal_plan.MealPlan/UpdateMealPlan"
	MealPlan_DeleteMealPlan_FullMethodName               = "/fitSphere.meal_plan.MealPlan/DeleteMealPlan"
	MealPlan_AddIngredientToMealPlan_FullMethodName      = "/fitSphere.meal_plan.MealPlan/AddIngredientToMealPlan"
	MealPlan_RemoveIngredientFromMealPlan_FullMethodName = "/fitSphere.meal_plan.MealPlan/RemoveIngredientFromMealPlan"
)

// MealPlanClient is the client API for MealPlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MealPlan Service
type MealPlanClient interface {
	GetMealPlan(ctx context.Context, in *GetMealPlanReq, opts ...grpc.CallOption) (*GetMealPlanRes, error)
	GetMealPlans(ctx context.Context, in *GetMealPlansReq, opts ...grpc.CallOption) (*GetMealPlansRes, error)
	CreateMealPlan(ctx context.Context, in *CreateMealPlanReq, opts ...grpc.CallOption) (*CreateMealPlanRes, error)
	UpdateMealPlan(ctx context.Context, in *UpdateMealPlanReq, opts ...grpc.CallOption) (*UpdateMealPlanRes, error)
	DeleteMealPlan(ctx context.Context, in *DeleteMealPlanReq, opts ...grpc.CallOption) (*NilRes, error)
	AddIngredientToMealPlan(ctx context.Context, in *AddIngredientReq, opts ...grpc.CallOption) (*NilRes, error)
	RemoveIngredientFromMealPlan(ctx context.Context, in *RemoveIngredientReq, opts ...grpc.CallOption) (*NilRes, error)
}

type mealPlanClient struct {
	cc grpc.ClientConnInterface
}

func NewMealPlanClient(cc grpc.ClientConnInterface) MealPlanClient {
	return &mealPlanClient{cc}
}

func (c *mealPlanClient) GetMealPlan(ctx context.Context, in *GetMealPlanReq, opts ...grpc.CallOption) (*GetMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) GetMealPlans(ctx context.Context, in *GetMealPlansReq, opts ...grpc.CallOption) (*GetMealPlansRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMealPlansRes)
	err := c.cc.Invoke(ctx, MealPlan_GetMealPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) CreateMealPlan(ctx context.Context, in *CreateMealPlanReq, opts ...grpc.CallOption) (*CreateMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_CreateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) UpdateMealPlan(ctx context.Context, in *UpdateMealPlanReq, opts ...grpc.CallOption) (*UpdateMealPlanRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMealPlanRes)
	err := c.cc.Invoke(ctx, MealPlan_UpdateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) DeleteMealPlan(ctx context.Context, in *DeleteMealPlanReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_DeleteMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) AddIngredientToMealPlan(ctx context.Context, in *AddIngredientReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_AddIngredientToMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealPlanClient) RemoveIngredientFromMealPlan(ctx context.Context, in *RemoveIngredientReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, MealPlan_RemoveIngredientFromMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealPlanServer is the server API for MealPlan service.
// All implementations must embed UnimplementedMealPlanServer
// for forward compatibility.
//
// MealPlan Service
type MealPlanServer interface {
	GetMealPlan(context.Context, *GetMealPlanReq) (*GetMealPlanRes, error)
	GetMealPlans(context.Context, *GetMealPlansReq) (*GetMealPlansRes, error)
	CreateMealPlan(context.Context, *CreateMealPlanReq) (*CreateMealPlanRes, error)
	UpdateMealPlan(context.Context, *UpdateMealPlanReq) (*UpdateMealPlanRes, error)
	DeleteMealPlan(context.Context, *DeleteMealPlanReq) (*NilRes, error)
	AddIngredientToMealPlan(context.Context, *AddIngredientReq) (*NilRes, error)
	RemoveIngredientFromMealPlan(context.Context, *RemoveIngredientReq) (*NilRes, error)
	mustEmbedUnimplementedMealPlanServer()
}

// UnimplementedMealPlanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealPlanServer struct{}

func (UnimplementedMealPlanServer) GetMealPlan(context.Context, *GetMealPlanReq) (*GetMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlan not implemented")
}
func (UnimplementedMealPlanServer) GetMealPlans(context.Context, *GetMealPlansReq) (*GetMealPlansRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlans not implemented")
}
func (UnimplementedMealPlanServer) CreateMealPlan(context.Context, *CreateMealPlanReq) (*CreateMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlan not implemented")
}
func (UnimplementedMealPlanServer) UpdateMealPlan(context.Context, *UpdateMealPlanReq) (*UpdateMealPlanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlan not implemented")
}
func (UnimplementedMealPlanServer) DeleteMealPlan(context.Context, *DeleteMealPlanReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMealPlan not implemented")
}
func (UnimplementedMealPlanServer) AddIngredientToMealPlan(context.Context, *AddIngredientReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIngredientToMealPlan not implemented")
}
func (UnimplementedMealPlanServer) RemoveIngredientFromMealPlan(context.Context, *RemoveIngredientReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIngredientFromMealPlan not implemented")
}
func (UnimplementedMealPlanServer) mustEmbedUnimplementedMealPlanServer() {}
func (UnimplementedMealPlanServer) testEmbeddedByValue()                  {}

// UnsafeMealPlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealPlanServer will
// result in compilation errors.
type UnsafeMealPlanServer interface {
	mustEmbedUnimplementedMealPlanServer()
}

func RegisterMealPlanServer(s grpc.ServiceRegistrar, srv MealPlanServer) {
	// If the following call pancis, it indicates UnimplementedMealPlanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealPlan_ServiceDesc, srv)
}

func _MealPlan_GetMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealPlan(ctx, req.(*GetMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_GetMealPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealPlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).GetMealPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_GetMealPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).GetMealPlans(ctx, req.(*GetMealPlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_CreateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).CreateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_CreateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).CreateMealPlan(ctx, req.(*CreateMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_UpdateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).UpdateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_UpdateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).UpdateMealPlan(ctx, req.(*UpdateMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_DeleteMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMealPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).DeleteMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_DeleteMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).DeleteMealPlan(ctx, req.(*DeleteMealPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_AddIngredientToMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).AddIngredientToMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_AddIngredientToMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).AddIngredientToMealPlan(ctx, req.(*AddIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealPlan_RemoveIngredientFromMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealPlanServer).RemoveIngredientFromMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealPlan_RemoveIngredientFromMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealPlanServer).RemoveIngredientFromMealPlan(ctx, req.(*RemoveIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MealPlan_ServiceDesc is the grpc.ServiceDesc for MealPlan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealPlan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.MealPlan",
	HandlerType: (*MealPlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMealPlan",
			Handler:    _MealPlan_GetMealPlan_Handler,
		},
		{
			MethodName: "GetMealPlans",
			Handler:    _MealPlan_GetMealPlans_Handler,
		},
		{
			MethodName: "CreateMealPlan",
			Handler:    _MealPlan_CreateMealPlan_Handler,
		},
		{
			MethodName: "UpdateMealPlan",
			Handler:    _MealPlan_UpdateMealPlan_Handler,
		},
		{
			MethodName: "DeleteMealPlan",
			Handler:    _MealPlan_DeleteMealPlan_Handler,
		},
		{
			MethodName: "AddIngredientToMealPlan",
			Handler:    _MealPlan_AddIngredientToMealPlan_Handler,
		},
		{
			MethodName: "RemoveIngredientFromMealPlan",
			Handler:    _MealPlan_RemoveIngredientFromMealPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}

const (
	Ingredients_GetIngredients_FullMethodName   = "/fitSphere.meal_plan.Ingredients/GetIngredients"
	Ingredients_GetIngredient_FullMethodName    = "/fitSphere.meal_plan.Ingredients/GetIngredient"
	Ingredients_CreateIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/CreateIngredient"
	Ingredients_UpdateIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/UpdateIngredient"
	Ingredients_DeleteIngredient_FullMethodName = "/fitSphere.meal_plan.Ingredients/DeleteIngredient"
)

// IngredientsClient is the client API for Ingredients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ingredients Service
type IngredientsClient interface {
	GetIngredients(ctx context.Context, in *GetIngredientsReq, opts ...grpc.CallOption) (*GetIngredientsRes, error)
	GetIngredient(ctx context.Context, in *GetIngredientReq, opts ...grpc.CallOption) (*GetIngredientRes, error)
	CreateIngredient(ctx context.Context, in *CreateIngredientReq, opts ...grpc.CallOption) (*CreateIngredientRes, error)
	UpdateIngredient(ctx context.Context, in *UpdateIngredientReq, opts ...grpc.CallOption) (*UpdateIngredientRes, error)
	DeleteIngredient(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error)
}

type ingredientsClient struct {
	cc grpc.ClientConnInterface
}

func NewIngredientsClient(cc grpc.ClientConnInterface) IngredientsClient {
	return &ingredientsClient{cc}
}

func (c *ingredientsClient) GetIngredients(ctx context.Context, in *GetIngredientsReq, opts ...grpc.CallOption) (*GetIngredientsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngredientsRes)
	err := c.cc.Invoke(ctx, Ingredients_GetIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) GetIngredient(ctx context.Context, in *GetIngredientReq, opts ...grpc.CallOption) (*GetIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_GetIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) CreateIngredient(ctx context.Context, in *CreateIngredientReq, opts ...grpc.CallOption) (*CreateIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_CreateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) UpdateIngredient(ctx context.Context, in *UpdateIngredientReq, opts ...grpc.CallOption) (*UpdateIngredientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIngredientRes)
	err := c.cc.Invoke(ctx, Ingredients_UpdateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientsClient) DeleteIngredient(ctx context.Context, in *DeleteIngredientReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Ingredients_DeleteIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngredientsServer is the server API for Ingredients service.
// All implementations must embed UnimplementedIngredientsServer
// for forward compatibility.
//
// Ingredients Service
type IngredientsServer interface {
	GetIngredients(context.Context, *GetIngredientsReq) (*GetIngredientsRes, error)
	GetIngredient(context.Context, *GetIngredientReq) (*GetIngredientRes, error)
	CreateIngredient(context.Context, *CreateIngredientReq) (*CreateIngredientRes, error)
	UpdateIngredient(context.Context, *UpdateIngredientReq) (*UpdateIngredientRes, error)
	DeleteIngredient(context.Context, *DeleteIngredientReq) (*NilRes, error)
	mustEmbedUnimplementedIngredientsServer()
}

// UnimplementedIngredientsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngredientsServer struct{}

func (UnimplementedIngredientsServer) GetIngredients(context.Context, *GetIngredientsReq) (*GetIngredientsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredients not implemented")
}
func (UnimplementedIngredientsServer) GetIngredient(context.Context, *GetIngredientReq) (*GetIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredient not implemented")
}
func (UnimplementedIngredientsServer) CreateIngredient(context.Context, *CreateIngredientReq) (*CreateIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedIngredientsServer) UpdateIngredient(context.Context, *UpdateIngredientReq) (*UpdateIngredientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredient not implemented")
}
func (UnimplementedIngredientsServer) DeleteIngredient(context.Context, *DeleteIngredientReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngredient not implemented")
}
func (UnimplementedIngredientsServer) mustEmbedUnimplementedIngredientsServer() {}
func (UnimplementedIngredientsServer) testEmbeddedByValue()                     {}

// UnsafeIngredientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngredientsServer will
// result in compilation errors.
type UnsafeIngredientsServer interface {
	mustEmbedUnimplementedIngredientsServer()
}

func RegisterIngredientsServer(s grpc.ServiceRegistrar, srv IngredientsServer) {
	// If the following call pancis, it indicates UnimplementedIngredientsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ingredients_ServiceDesc, srv)
}

func _Ingredients_GetIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngredientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).GetIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_GetIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).GetIngredients(ctx, req.(*GetIngredientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_GetIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).GetIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_GetIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).GetIngredient(ctx, req.(*GetIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_CreateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).CreateIngredient(ctx, req.(*CreateIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_UpdateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).UpdateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_UpdateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).UpdateIngredient(ctx, req.(*UpdateIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingredients_DeleteIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngredientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).DeleteIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingredients_DeleteIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).DeleteIngredient(ctx, req.(*DeleteIngredientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ingredients_ServiceDesc is the grpc.ServiceDesc for Ingredients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingredients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.meal_plan.Ingredients",
	HandlerType: (*IngredientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIngredients",
			Handler:    _Ingredients_GetIngredients_Handler,
		},
		{
			MethodName: "GetIngredient",
			Handler:    _Ingredients_GetIngredient_Handler,
		},
		{
			MethodName: "CreateIngredient",
			Handler:    _Ingredients_CreateIngredient_Handler,
		},
		{
			MethodName: "UpdateIngredient",
			Handler:    _Ingredients_UpdateIngredient_Handler,
		},
		{
			MethodName: "DeleteIngredient",
			Handler:    _Ingredients_DeleteIngredient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}
