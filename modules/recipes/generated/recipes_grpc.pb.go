// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: recipes.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Recipes_CreateRecipe_FullMethodName  = "/fitSphere.recipes.Recipes/CreateRecipe"
	Recipes_GetRecipe_FullMethodName     = "/fitSphere.recipes.Recipes/GetRecipe"
	Recipes_SearchRecipes_FullMethodName = "/fitSphere.recipes.Recipes/SearchRecipes"
	Recipes_UpdateRecipe_FullMethodName  = "/fitSphere.recipes.Recipes/UpdateRecipe"
	Recipes_DeleteRecipe_FullMethodName  = "/fitSphere.recipes.Recipes/DeleteRecipe"
)

// RecipesClient is the client API for Recipes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Recipes Service
type RecipesClient interface {
	CreateRecipe(ctx context.Context, in *CreateRecipeReq, opts ...grpc.CallOption) (*CreateRecipeRes, error)
	GetRecipe(ctx context.Context, in *GetRecipeReq, opts ...grpc.CallOption) (*GetRecipeRes, error)
	SearchRecipes(ctx context.Context, in *SearchRecipesReq, opts ...grpc.CallOption) (*SearchRecipesRes, error)
	UpdateRecipe(ctx context.Context, in *UpdateRecipeReq, opts ...grpc.CallOption) (*UpdateRecipeRes, error)
	DeleteRecipe(ctx context.Context, in *DeleteRecipeReq, opts ...grpc.CallOption) (*NilRes, error)
}

type recipesClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipesClient(cc grpc.ClientConnInterface) RecipesClient {
	return &recipesClient{cc}
}

func (c *recipesClient) CreateRecipe(ctx context.Context, in *CreateRecipeReq, opts ...grpc.CallOption) (*CreateRecipeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecipeRes)
	err := c.cc.Invoke(ctx, Recipes_CreateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesClient) GetRecipe(ctx context.Context, in *GetRecipeReq, opts ...grpc.CallOption) (*GetRecipeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecipeRes)
	err := c.cc.Invoke(ctx, Recipes_GetRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesClient) SearchRecipes(ctx context.Context, in *SearchRecipesReq, opts ...grpc.CallOption) (*SearchRecipesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRecipesRes)
	err := c.cc.Invoke(ctx, Recipes_SearchRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesClient) UpdateRecipe(ctx context.Context, in *UpdateRecipeReq, opts ...grpc.CallOption) (*UpdateRecipeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecipeRes)
	err := c.cc.Invoke(ctx, Recipes_UpdateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipesClient) DeleteRecipe(ctx context.Context, in *DeleteRecipeReq, opts ...grpc.CallOption) (*NilRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilRes)
	err := c.cc.Invoke(ctx, Recipes_DeleteRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipesServer is the server API for Recipes service.
// All implementations must embed UnimplementedRecipesServer
// for forward compatibility.
//
// Recipes Service
type RecipesServer interface {
	CreateRecipe(context.Context, *CreateRecipeReq) (*CreateRecipeRes, error)
	GetRecipe(context.Context, *GetRecipeReq) (*GetRecipeRes, error)
	SearchRecipes(context.Context, *SearchRecipesReq) (*SearchRecipesRes, error)
	UpdateRecipe(context.Context, *UpdateRecipeReq) (*UpdateRecipeRes, error)
	DeleteRecipe(context.Context, *DeleteRecipeReq) (*NilRes, error)
	mustEmbedUnimplementedRecipesServer()
}

// UnimplementedRecipesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipesServer struct{}

func (UnimplementedRecipesServer) CreateRecipe(context.Context, *CreateRecipeReq) (*CreateRecipeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedRecipesServer) GetRecipe(context.Context, *GetRecipeReq) (*GetRecipeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedRecipesServer) SearchRecipes(context.Context, *SearchRecipesReq) (*SearchRecipesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecipes not implemented")
}
func (UnimplementedRecipesServer) UpdateRecipe(context.Context, *UpdateRecipeReq) (*UpdateRecipeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipe not implemented")
}
func (UnimplementedRecipesServer) DeleteRecipe(context.Context, *DeleteRecipeReq) (*NilRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipe not implemented")
}
func (UnimplementedRecipesServer) mustEmbedUnimplementedRecipesServer() {}
func (UnimplementedRecipesServer) testEmbeddedByValue()                 {}

// UnsafeRecipesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipesServer will
// result in compilation errors.
type UnsafeRecipesServer interface {
	mustEmbedUnimplementedRecipesServer()
}

func RegisterRecipesServer(s grpc.ServiceRegistrar, srv RecipesServer) {
	// If the following call pancis, it indicates UnimplementedRecipesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Recipes_ServiceDesc, srv)
}

func _Recipes_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recipes_CreateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServer).CreateRecipe(ctx, req.(*CreateRecipeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipes_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recipes_GetRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServer).GetRecipe(ctx, req.(*GetRecipeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipes_SearchRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecipesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServer).SearchRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recipes_SearchRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServer).SearchRecipes(ctx, req.(*SearchRecipesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipes_UpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServer).UpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recipes_UpdateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServer).UpdateRecipe(ctx, req.(*UpdateRecipeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipes_DeleteRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipesServer).DeleteRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recipes_DeleteRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipesServer).DeleteRecipe(ctx, req.(*DeleteRecipeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Recipes_ServiceDesc is the grpc.ServiceDesc for Recipes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recipes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.recipes.Recipes",
	HandlerType: (*RecipesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecipe",
			Handler:    _Recipes_CreateRecipe_Handler,
		},
		{
			MethodName: "GetRecipe",
			Handler:    _Recipes_GetRecipe_Handler,
		},
		{
			MethodName: "SearchRecipes",
			Handler:    _Recipes_SearchRecipes_Handler,
		},
		{
			MethodName: "UpdateRecipe",
			Handler:    _Recipes_UpdateRecipe_Handler,
		},
		{
			MethodName: "DeleteRecipe",
			Handler:    _Recipes_DeleteRecipe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recipes.proto",
}
