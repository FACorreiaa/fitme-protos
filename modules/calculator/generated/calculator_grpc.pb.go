// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: calculator.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Calculator_CreateUserMacro_FullMethodName        = "/fitSphere.calculator.Calculator/CreateUserMacro"
	Calculator_GetUsersMacros_FullMethodName         = "/fitSphere.calculator.Calculator/GetUsersMacros"
	Calculator_GetUserMacros_FullMethodName          = "/fitSphere.calculator.Calculator/GetUserMacros"
	Calculator_CreateOfflineUserMacro_FullMethodName = "/fitSphere.calculator.Calculator/CreateOfflineUserMacro"
	Calculator_DeleteUserMacro_FullMethodName        = "/fitSphere.calculator.Calculator/DeleteUserMacro"
	Calculator_SetActiveUserMacro_FullMethodName     = "/fitSphere.calculator.Calculator/SetActiveUserMacro"
)

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for the calculator
type CalculatorClient interface {
	CreateUserMacro(ctx context.Context, in *CreateUserMacroRequest, opts ...grpc.CallOption) (*CreateUserMacroResponse, error)
	GetUsersMacros(ctx context.Context, in *GetAllUserMacrosRequest, opts ...grpc.CallOption) (*GetAllUserMacrosResponse, error)
	GetUserMacros(ctx context.Context, in *GetUserMacroRequest, opts ...grpc.CallOption) (*GetUserMacroResponse, error)
	CreateOfflineUserMacro(ctx context.Context, in *CreateOfflineUserMacroRequest, opts ...grpc.CallOption) (*CreateOfflineUserMacroResponse, error)
	DeleteUserMacro(ctx context.Context, in *DeleteUserMacroRequest, opts ...grpc.CallOption) (*DeleteUserMacroResponse, error)
	SetActiveUserMacro(ctx context.Context, in *SetActiveUserMacroRequest, opts ...grpc.CallOption) (*SetActiveUserMacroResponse, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) CreateUserMacro(ctx context.Context, in *CreateUserMacroRequest, opts ...grpc.CallOption) (*CreateUserMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserMacroResponse)
	err := c.cc.Invoke(ctx, Calculator_CreateUserMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) GetUsersMacros(ctx context.Context, in *GetAllUserMacrosRequest, opts ...grpc.CallOption) (*GetAllUserMacrosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUserMacrosResponse)
	err := c.cc.Invoke(ctx, Calculator_GetUsersMacros_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) GetUserMacros(ctx context.Context, in *GetUserMacroRequest, opts ...grpc.CallOption) (*GetUserMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMacroResponse)
	err := c.cc.Invoke(ctx, Calculator_GetUserMacros_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) CreateOfflineUserMacro(ctx context.Context, in *CreateOfflineUserMacroRequest, opts ...grpc.CallOption) (*CreateOfflineUserMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOfflineUserMacroResponse)
	err := c.cc.Invoke(ctx, Calculator_CreateOfflineUserMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) DeleteUserMacro(ctx context.Context, in *DeleteUserMacroRequest, opts ...grpc.CallOption) (*DeleteUserMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserMacroResponse)
	err := c.cc.Invoke(ctx, Calculator_DeleteUserMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SetActiveUserMacro(ctx context.Context, in *SetActiveUserMacroRequest, opts ...grpc.CallOption) (*SetActiveUserMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActiveUserMacroResponse)
	err := c.cc.Invoke(ctx, Calculator_SetActiveUserMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility.
//
// Service definition for the calculator
type CalculatorServer interface {
	CreateUserMacro(context.Context, *CreateUserMacroRequest) (*CreateUserMacroResponse, error)
	GetUsersMacros(context.Context, *GetAllUserMacrosRequest) (*GetAllUserMacrosResponse, error)
	GetUserMacros(context.Context, *GetUserMacroRequest) (*GetUserMacroResponse, error)
	CreateOfflineUserMacro(context.Context, *CreateOfflineUserMacroRequest) (*CreateOfflineUserMacroResponse, error)
	DeleteUserMacro(context.Context, *DeleteUserMacroRequest) (*DeleteUserMacroResponse, error)
	SetActiveUserMacro(context.Context, *SetActiveUserMacroRequest) (*SetActiveUserMacroResponse, error)
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalculatorServer struct{}

func (UnimplementedCalculatorServer) CreateUserMacro(context.Context, *CreateUserMacroRequest) (*CreateUserMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserMacro not implemented")
}
func (UnimplementedCalculatorServer) GetUsersMacros(context.Context, *GetAllUserMacrosRequest) (*GetAllUserMacrosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersMacros not implemented")
}
func (UnimplementedCalculatorServer) GetUserMacros(context.Context, *GetUserMacroRequest) (*GetUserMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMacros not implemented")
}
func (UnimplementedCalculatorServer) CreateOfflineUserMacro(context.Context, *CreateOfflineUserMacroRequest) (*CreateOfflineUserMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOfflineUserMacro not implemented")
}
func (UnimplementedCalculatorServer) DeleteUserMacro(context.Context, *DeleteUserMacroRequest) (*DeleteUserMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMacro not implemented")
}
func (UnimplementedCalculatorServer) SetActiveUserMacro(context.Context, *SetActiveUserMacroRequest) (*SetActiveUserMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveUserMacro not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}
func (UnimplementedCalculatorServer) testEmbeddedByValue()                    {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	// If the following call pancis, it indicates UnimplementedCalculatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_CreateUserMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).CreateUserMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_CreateUserMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).CreateUserMacro(ctx, req.(*CreateUserMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_GetUsersMacros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserMacrosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).GetUsersMacros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_GetUsersMacros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).GetUsersMacros(ctx, req.(*GetAllUserMacrosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_GetUserMacros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).GetUserMacros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_GetUserMacros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).GetUserMacros(ctx, req.(*GetUserMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_CreateOfflineUserMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfflineUserMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).CreateOfflineUserMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_CreateOfflineUserMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).CreateOfflineUserMacro(ctx, req.(*CreateOfflineUserMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_DeleteUserMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).DeleteUserMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_DeleteUserMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).DeleteUserMacro(ctx, req.(*DeleteUserMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SetActiveUserMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveUserMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SetActiveUserMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_SetActiveUserMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SetActiveUserMacro(ctx, req.(*SetActiveUserMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitSphere.calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserMacro",
			Handler:    _Calculator_CreateUserMacro_Handler,
		},
		{
			MethodName: "GetUsersMacros",
			Handler:    _Calculator_GetUsersMacros_Handler,
		},
		{
			MethodName: "GetUserMacros",
			Handler:    _Calculator_GetUserMacros_Handler,
		},
		{
			MethodName: "CreateOfflineUserMacro",
			Handler:    _Calculator_CreateOfflineUserMacro_Handler,
		},
		{
			MethodName: "DeleteUserMacro",
			Handler:    _Calculator_DeleteUserMacro_Handler,
		},
		{
			MethodName: "SetActiveUserMacro",
			Handler:    _Calculator_SetActiveUserMacro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
